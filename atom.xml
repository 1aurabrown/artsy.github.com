<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Art.sy Engineering]]></title>
  <link href="http://artsy.github.com/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2012-01-29T15:25:45-05:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Art.sy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Art.sy Uses Github to Build Art.sy]]></title>
    <link href="http://artsy.github.com/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/"/>
    <updated>2012-01-29T14:26:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy</id>
    <content type="html"><![CDATA[<p><a href="http://zachholman.com/">Zach Holman</a> gave a good talk on <a href="http://zachholman.com/talk/how-github-uses-github-to-build-github">How Github uses Github to build Github</a> at Rubyconf. It was great to hear how similar our own processes are at Art.sy, with a few notable differences.</p>

<p>Art.sy engineers store almost everything on Github. We use Github Wikis, but don&#8217;t use Github Issues much. We work in 3-week sprints with <a href="http://pivotaltracker.com/">Pivotal Tracker</a> instead. This blog is on Github. And, of course, we have our own Hubot which feeds funny animated GIFs after each successful deploy to our IRC channel.</p>

<p>The most interesting part for me was around these two slides.</p>

<p><img src="http://artsy.github.com/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull.png" title="[Github Pull]" >
<img src="http://artsy.github.com/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-fork.png" title="[Github Fork]" ></p>

<p>Zach emphasized that you don&#8217;t need forks to make pull requests. While technically true, I find forks particularly useful to keep things clean.</p>

<p>At Art.sy we use personal forks to work on features, create topical branches and make pull requests into the master from there. This is the workflow of the vast majority of open-source projects too. Now, Zach is right, you don&#8217;t want to create any second class developers - our entire team has write access to the master. We use pull requests from forks to do peer code reviews, even for trivial things. I would typically make a pull request including the person I&#8217;d like to code review my changes in the title. Here&#8217;s an example.</p>

<p><img src="http://artsy.github.com/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull-request.png" title="[Targeted Pull Request]" ></p>

<p>(Notice the use of hash rocket. Zach, Ruby has transcended our lives too.)</p>

<p>Working on forks keeps developer branches away from &#8220;master&#8221;. The main repository only has three branches: &#8220;master&#8221;, &#8220;staging&#8221; and &#8220;production&#8221; and each developer can make up whatever branching strategy they like in individual forks.</p>

<p>Code reviews have nothing to do with hierarchy or organization, any developer will code review any other developer&#8217;s work. We tend to avoid using the same person for two subsequent code reviews to prevent excessive buddying. Zach called his pull requests &#8220;collective experiments&#8221; - a place for active discussions, rejections and praise. I really like that. Each of my rejected pull requests has been a great learning experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress and Jekyll]]></title>
    <link href="http://artsy.github.com/blog/2012/01/18/octopress-and-jekyll/"/>
    <updated>2012-01-18T23:03:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/18/octopress-and-jekyll</id>
    <content type="html"><![CDATA[<p>This blog is powered by static pages.</p>

<p>I think it&#8217;s quite ironic that, while we spend a lot of time building complex large scale dynamic websites, our new favorite publishing platform is a system that compiles static content. But, in many ways, <a href="http://octopress.org/">Octopress</a> and <a href="https://github.com/mojombo/jekyll">Jekyll</a> fit our philosophy and developer workflow perfectly. Writing an article for this blog means using the same tools and processes as contributing to a project on Github. And everyone is welcome to browse and learn from <a href="https://github.com/artsy/artsy.github.com/tree/source">the source</a> of this blog, and even fork it and contribute fixes to the layout or even blog features.</p>

<p>Here&#8217;s what Art.sy engineers do to get setup (once) and publish a new post.</p>

<pre><code>$ git clone git@github.com:artsy/artsy.github.com.git
 Cloning into artsy.github.com...

$ cd artsy.github.com

artsy.github.com$ git checkout source
 Branch source set up to track remote branch source from origin.
 Switched to a new branch 'source'

artsy.github.com$ mkdir _deploy

artsy.github.com$ cd _deploy

artsy.github.com/_deploy$ git init
 Initialized empty Git repository in artsy.github.com/_deploy/.git/

artsy.github.com/_deploy$ git remote add origin git@github.com:artsy/artsy.github.com.git

artsy.github.com/_deploy$ git pull origin master
 From github.com:artsy/artsy.github.com
  * branch            master     -&gt; FETCH_HEAD

artsy.github.com/_deploy$ cd ..

artsy.github.com$ rake create_post["Octopress and Jekyll"]
 Creating new post: source/_posts/2012-01-18-octopress-and-jekyll.md

artsy.github.com$ git commit -am "Octopress and Jekyll"
 1 files changed, 52 insertions(+), 0 deletions(-)
 create mode 100644 source/_posts/2012-01-18-octopress-and-jekyll.md

artsy.github.com$ rake deploy
</code></pre>

<p>(If you&#8217;re confused by the setup, check out <a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">this post</a>).</p>

<p>We believe in simple systems and love the opportunity to understand technology in-depth. Everything you see, short of the blog content and styles, is written in Ruby by very smart people. The source is open and free, which helps us learn and make progress, together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Layouts with CSS3]]></title>
    <link href="http://artsy.github.com/blog/2012/01/17/responsive-layouts-with-css3/"/>
    <updated>2012-01-17T11:03:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/17/responsive-layouts-with-css3</id>
    <content type="html"><![CDATA[<p>All of the <a href="http://sass-lang.com/">SCSS</a> stylesheets used to design this blog compile down to one file (view the source of this page and check out screen.css), and there isn&#8217;t any JavaScript affecting the layout. But there are really three versions of this page. If you&#8217;re reading this on a smartphone, what you see is almost entirely different from what you would see if you were reading this in a full screen browser. If you&#8217;re on a computer, try making this page full screen and slowly resize it to make it smaller. You&#8217;ll first notice that the Art.sy logo disappears just before it would cover the text in the main column. Keep reducing the viewport and eventually the page will snap into a mobile format with the Art.sy logo centered at the top, followed by the centered header text and mobile search box all above the index of recent posts.</p>

<h2>The Philosophy</h2>

<p>Why bother? It&#8217;s true that smartphone web browsers are pretty advanced and certainly can handle rendering the full version of this blog. But there&#8217;s a big difference between ensuring a site works and creating a good experience for your audience regardless of the device they&#8217;re using. If anything, advances in the mobile web make responsive layouts like the one on this blog even more necessary — as it becomes more and more likely that your users are viewing your site on a handheld screen, it becomes less acceptable to force your audience to zoom way into your page and follow the text with their thumbs.</p>

<p>The key to a good mobile design is to fix at least one axis — it&#8217;s fine if the user has to scroll down or to the right to see the rest of the content, but making the user scroll diagonally means that the layout doesn&#8217;t fit the screen. For text-heavy sites like this blog, it&#8217;s best to just allow vertical scrolling. Aside from this consideration, links, text fields, and buttons must be large enough to allow for easy navigation with thumbs. The font size may need to be adjusted to optimize viewing on a mobile screen. On a Mac, you can use mobile Safari on the iPhone Simulator that comes with <a href="http://developer.apple.com/xcode/">Xcode</a> to see how your site will look on a phone.</p>

<h2>Media Queries</h2>

<p>The good news is that these responsive layouts aren&#8217;t difficult to implement. When I set out to theme this <a href="http://octopress.org/">Octopress</a> blog, our designer gave me two comps, one for the full version of the site and the other for the mobile version. The first step towards a responsive layout is to notice common elements between the two designs. If you compare the two versions of the blog, you&#8217;ll notice that they contain essentially the same content. This means that we need only one template file for both designs, and definitely do not need to resort to creating a whole mobile subdomain to serve different content to small screens. For elements that aren&#8217;t the same in the two designs, we can simply hide them by setting <code>display: none</code> for devices where the elements shouldn&#8217;t be shown. I used this technique in a couple of places on the blog: the right sidebar is hidden on the mobile version, while the mobile search bar (which differs from the search bar on the side in that it has placeholder text and appears in the main content <code>div</code>) isn&#8217;t displayed on the full version of the site.</p>

<p>But how do you apply different styles to the same elements depending on the size of the browser&#8217;s viewport? There are a couple of ways, but by far the cleanest way is to use CSS3 media queries. Media queries allow developers to apply different styles to elements on a page depending on the media on which they are displayed, whether that medium is a screen, a projection, print, braille, etc. The most common use of media queries, however, is to create responsive layouts. Media queries come after an <code>@media</code> declaration. Directly after comes the definition of the media type: we&#8217;re concerned with creating responsive layouts for screens, and as a result, we&#8217;ll declare our styles under <code>@media screen</code>. To apply custom styles based on the size of the screen, we&#8217;ll use media features, which come after the keyword <code>and</code> and are enclosed in parentheses. Here&#8217;s the SCSS code used to style the Art.sy logo on this blog:</p>

<pre><code>#lrg-mark {
    background-image: url("../images/Logo.png");
    background-repeat: no-repeat;
    display: block;
    height: 92px;
    width: 249px;

    span {
      display: none;
    }

    @media screen and (min-width: 482px) {
      left: 35px;
      position: fixed;
      top: 15px;
    }
    @media screen and (max-width: 1280px) and (min-width: 482px) {
      display: none;
    }
    @media screen and (max-width: 481px) {
      margin: 0 auto 20px auto;
      background-position: center top;
    }
}
</code></pre>

<p>The styles that are common to all viewports are written outside of <code>@media</code> declarations at the top of the styles for <code>#lrg-mark</code> — regardless of the screen size, we want the logo to be the same image and the same size, and we don&#8217;t want to display the span inside of the div that contains fallback text. The rest of the styles are given in media queries: for a large viewport, we want the logo fixed in the upper right corner, for slightly smaller viewports, we want it to disappear, and for mobile viewports, we want it centered on the screen. Note that 481px is a magic number: it&#8217;s the width of an iPhone in landscape mode.</p>

<p>The media features <code>max-width</code> and <code>min-width</code> are a little misleading: they don&#8217;t mean the maximum or minimum possible width of the user&#8217;s screen. It&#8217;s best to think of <code>max-</code> as &#8220;less-than-or-equal-to&#8221; and <code>min-</code> as &#8220;greater-than-or-equal-to.&#8221; See <a href="http://www.w3.org/TR/css3-mediaqueries/">the W3C&#8217;s website</a> for a complete reference on CSS media queries.</p>

<h2>Making It Cross-Browser</h2>

<p>CSS3 media queries are awesome, but even though all the latest versions of the major browsers support them, it&#8217;s very likely that a portion of your site&#8217;s visitors will be using browsers that don&#8217;t support these new CSS features. Luckily, this problem has already been solved by great people who like to give away things for free. Just include <a href="https://github.com/Modernizr/Modernizr">modernizr.js</a> on your page, and it will provide a JavaScript fallback for media queries, as well as for many other potentially unsupported CSS3 features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://artsy.github.com/blog/2012/01/05/hello-world/"/>
    <updated>2012-01-05T19:34:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/01/05/hello-world</id>
    <content type="html"><![CDATA[<p>We&#8217;ve been building cool stuff at <a href="http://art.sy">Art.sy</a> and are looking forward to sharing all things tech with you.</p>
]]></content>
  </entry>
  
</feed>
