<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artsy Engineering]]></title>
  <link href="http://artsy.github.io/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2014-09-24T09:27:03-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Launching a Security Bug Bounty Program at Artsy]]></title>
    <link href="http://artsy.github.io/blog/2014/09/24/launching-a-security-bug-bounty-program-at-artsy/"/>
    <updated>2014-09-24T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/24/launching-a-security-bug-bounty-program-at-artsy</id>
    <content type="html"><![CDATA[<p>Many established companies have bug bounty programs, including a recently publicized <a href="http://www.forbes.com/sites/kashmirhill/2014/09/10/bug-bounty-programs">Twitter Bug Bounty</a>. Some use services, such as <a href="https://hackerone.com">HackerOne</a> or <a href="https://bugcrowd.com">BugCrowd</a>. In early September 2014 we quietly launched <a href="https://artsy.net/security">our own Security Bug Bounty</a>. Since then we have fixed 14 issues reported by 15 security researchers and paid $750 in bounty. In the process we have learned a ton and wanted to share some things that would have probably done a little bit differently, knowing what we know now.</p>

<p>In this post I will focus on both technical and non-technical takeaways, and will provide an extensive list of vulnerabilities that should have been dealt with before launching our bug bounty.</p>

<!-- more -->


<h2>Before You Begin</h2>

<p>Our security bug bounty program started with an engineer (myself) creating a <a href="https://artsy.net/security">document</a> on our website, largely inspired from other bug bounty programs. Our staff attorney wanted to review and edit it, something that must definitely be done.</p>

<p>A less evident step was to have a conversation with the finance department about whether or not bounty could be paid to individuals living in countries that may have U.S. sanctions imposed on them (see <a href="http://www.treasury.gov/resource-center/faqs/Sanctions/Pages/answer.aspx">What countries do I need to worry about in terms of U.S. sanctions?</a>). We also needed to talk about the terms under which reward payments could be made at all - we now require the individual&#8217;s full name and postal address. Other bounty programs, including <a href="https://bounty.github.com/">Github&#8217;s</a>, require a <a href="http://www.irs.gov/pub/irs-pdf/fw9.pdf">W9</a> for U.S. citizens or a <a href="http://www.irs.gov/pub/irs-pdf/fw8ben.pdf">W8_BEN</a> for non-U.S. citizens before any payment can be made (we may start doing this as well).</p>

<p>Another question raised was regarding budget and how much money I expected to pay. With about $50 a bug I estimated that this program would not exceed about $1,000 in the first few months, with an initial spending spike, because with time bugs would be harder to find. This was the wrong way to think about it - hacking is a skill and better hackers are paid more to spend more time on a single issue. We are now receiving only a fraction of bug reports, but new issues typically required much more effort to engineer. Those cost us more money, proportional to potential reputation loss. To sum this up, I recommend budgeting a fixed quarterly amount and using it as a reference to cap the maximum amount of dollars paid for a single issue.</p>

<p>It should be clear that every dollar of the $1,000 spent each month is worth every penny when you consider having exploitable security vulnerabilities in your production systems.</p>

<h2>Security Bug Bounty Services</h2>

<p>I have looked at the many bug bounty services and were quite impressed with their offerings, their ability to automatically recognize duplicates and to report on a security researcher&#8217;s reputation. However, I didn&#8217;t want to add yet another service in the plethora of services that we already use and wanted to have some brand control. In all honesty I do not know whether rolling out our own was or wasn&#8217;t the best decision, but we&#8217;re getting security bug reports, fixing real issues, and that&#8217;s what matters.</p>

<h2>Full Time Attention Required</h2>

<p>The early days of the bug bounty program needed full time attention from one engineer who knew the entire system very well. This meant reading every report, triaging it as something new or already known, and opening detailed issues in the internal bug tracking systems. We labeled every issue as &#8220;Security Bounty&#8221; and created a &#8220;Security Bounty&#8221; project in Pivotal Tracker for issues that span multiple projects. We also found it useful to keep a Google Docs Spreadsheet to track the individuals reporting issues in a way where you can easily copy-paste all the issues that they have reported into an email to give them an update. <a href="https://docs.google.com/spreadsheets/d/1_Bq0jMImwU_r2-R76d2vqsYPLt9AB02lz2ZowK77yHc/edit?usp=sharing">Here&#8217;s such a blank spreadsheet</a> with some formulas that can instantly tell you how many issues were opened, fixed, etc.</p>

<h2>Communicating the Program to the Team</h2>

<p>After running the program for a week I sent an email with a bit of statistics and explanations to the entire team. The entire e-mail can be found <a href="https://gist.github.com/dblock/5781f9b4931191de42b4">here</a>, and if there&#8217;s one thing you retain from this post, that should be it. The e-mail was extremely well received, highlighting both the importance of explaining all-the-things to the rest of the company and being very transparent about such sensitive issues as security.</p>

<h2>Classes of Bugs</h2>

<p>While we were very diligent about large classes of potential vulnerabilities, such as SQL injections, most issues reported by the independent security researchers were also avoidable and should have been fixed before launching the program. Other issues should have been reviewedÂ and acknowledged as a known, but acceptable risk upfront as well.</p>

<h3>SSL, Secure Cookies and HSTS</h3>

<p>If you let users signup and log-in or enter any personal information, your entire site must run under SSL. We were half way through this transition with some services still open for both SSL and non-SSL requests. Also you must enable <a href="https://scotthelme.co.uk/hsts-the-missing-link-in-tls">HSTS</a>, so that browsers that have visited your site before make an SSL request even if the user typed a non-SSL address, avoiding leaking session data over an insecure connection.</p>

<p>In Rails, HSTS is turned on with <code>config.force_ssl = true</code>. In node.js applications we use <a href="https://github.com/artsy/force-public/blob/master/lib/middleware/hsts.coffee">an HSTS middleware</a> combined with <a href="https://github.com/artsy/force-public/blob/master/lib/middleware/ensure_ssl.coffee">a redirect middleware</a>, but you might also want to check out <a href="https://github.com/evilpacket/helmet">helmet</a>.</p>

<p>Redirecting from HTTP to HTTPS is a compromise, it allows existing non-SSL clients and the myriad of existing links out there to keep functioning, however it exposes users to a potential risk of sending data over a non-encrypted connection, first. This is mitigated by using HSTS and by making sure session cookies carry a <code>secure=true</code> option.</p>

<h3>Clickjacking Vulnerabilities</h3>

<p>Make sure your site is not vulnerable to clickjacking. These attacks rely on loading the target page in an <code>iframe</code>. A simple test is to try to embed your site in the <a href="https://gist.github.com/dblock/8a91f805e97ba2325278">code in this gist</a>.</p>

<p>The standard and very simple fix is to deny framing by using the <code>X-Frame-Options</code> header with a <code>SAMEORIGIN</code> or, better, <code>DENY</code> value. There&#8217;s a rather advanced explanation of this problem and the difference between these two values in an article about <a href="http://webstersprodigy.net/2012/09/13/clickjacking-google">clickjacking Google</a>. This is enabled by default in Rails, and can be turned on in node.js applications with <a href="https://github.com/evilpacket/helmet">helmet</a>.</p>

<h3>Cross-Site Scripting and Content Security Policy</h3>

<p>Spend time looking for Cross-Site Scripting (XSS) vulnerabilities in your code. The majority could have been known by actually attempting to enter JavaScript into the few user inputs that we have and then going to the pages that display that content. Then examine the code for any instances that render raw HTML, usually via <code>!=</code> in Jade templates or HAML. Track down how this data is inputted into the system and check whether these need to really be raw HTML. As a rule of thumb, do not trust the data in your database or data returned from your API, and encode or sanitize HTML when rendering it. We use the <a href="https://github.com/rgrove/sanitize">Sanitize</a> gem in Ruby, as well as a <a href="https://github.com/artsy/force-public/commit/0902c3450a0de60ee2b3e45a08e2dab656b31d86">fix in our open-source front-end</a> for how to deal with this in a node.js app.</p>

<p>Content Security Policy (CSP) also helps prevent cross-site-scripting. You can add a <code>Content-Security-Policy</code> header, or its variations, <code>X-WebKit-CSP</code> and <code>X-Content-Security-Policy</code>.</p>

<h3>Preventing User Abuse</h3>

<p>Log-in as a user, note their session cookie and log the user out. If you can reuse the session cookie in a new browser, your&#8217;re not actually logging users out. This is particularly problematic on public computers and seems to be an issue often exploited by man-in-the-middle malware. To fix this, you must track sessions server-side.</p>

<p>Another similar problem is that all user sessions must be invalidated when a user resets their password. Imagine that you suspect that your account has been compromised, changing a password should make you safe again and the attacker who logged in as you earlier should be logged out. This is something natively supported by many session management implementations, including Devise, by adding a &#8220;salt&#8221; stored with the user record into the session cookie and comparing it after a session is deserialized.</p>

<p>Finally, make sure you either lock accountsÂ or throttle after too many login or password reset attempts.</p>

<p>Another related example is when attackers can spam users with legitimate requests, such as password resets. For example, we didn&#8217;t <a href="https://github.com/artsy/flare/pull/12">restrict how many SMS messages one can send</a> on our iPhone app download landing page. This particular instance had no actual benefit for the attacker, but could have really hurt our reputation. What would you say if a paying customer reported being spammed with anything coming from your company?</p>

<h3>Open Redirect</h3>

<p>Review all HTTP redirects in your applications. A common problem is when you can supply a URI and be redirected to it after, for example, a social login. This, combined with an XSS, would leak your session cookies, so don&#8217;t ever redirect outside of your application. Furthermore, this can be a source of an XSS by itself with data URLs, something I had never seen before.</p>

<h3>Mixed Content</h3>

<p>Make sure the secure (HTTPS) pages aren&#8217;t loading insecure (HTTP) javascript. A man-in-the-middle attack would enable injecting JavaScript into, otherwise, secure pages. Don&#8217;t forget to check your error pages.</p>

<h2>Issues We Won&#8217;t Fix</h2>

<p>We attempt to fix every reported issue, even very small. A single vulnerability may not be a problem in isolation, but may be exploitable in combination with another unknown issue. Still, we want to be able to disagree with the risk assessment of the security researcher. Such issues require a detailed explanation in a well articulated and prepared response, as well as a mention in a list of issues not eligible for bounty in our program&#8217;s description. Here&#8217;re a few examples.</p>

<h3>User Enumeration and Discovery</h3>

<p>Attackers often obtain databases of user e-mails and try to use those on other services with password dictionaries. When users enter the wrong password on login, you&#8217;re supposed to be returning the same error message whether the account exists or not. While that would prevent user enumeration and make password attacks impractical, it&#8217;s terribly unhelpful to the person trying to access your website. Many sites choose not to fix this, including Artsy. After-all, we will eventually have all of the 11 billion people on Artsy and the issue will be moot!</p>

<h3>Cross-Site Request Forgery</h3>

<p>CSRF is a class of attacks that attempt to force a user to execute unwanted actions on a web application in which theyÂ are currently authenticated, often without their knowledge. This can be mitigated by ensuring that the action was triggered from a legitimately rendered page within a certain period of time. CSRF was disabled on Artsy following some complicated technical issues related to caching, and is something that would cost us a lot of time and effort to bring back. It&#8217;s a real problem, but not a critical one, so we explicitly list it in our bug bounty rules as ineligible for bounty.</p>

<h3>User Identity</h3>

<p>One of the most frequently reported issues is that we don&#8217;t require e-mail verification, which is by design on Artsy. We used to have email verification, but too many users found it confusing and would never confirm their e-mail addresses. We treat emails as usernames, without any additional level of trust except for manually verified users, something internal to our systems.</p>

<h3>Sender Policy Framework</h3>

<p>Having a Sender Policy Framework (SPF) record increases the chances people will get emails you send. Without one, your email has a greater chance of being marked as Spam. Adding an SPF may not be as simple, especially if you use multiple thirdparty services for delivering e-mail. Furthermore, it might make forwarded e-mails go to spam.</p>

<h2>Acknowledging Security Researchers</h2>

<p>While most security researchers do an amazing job reporting issues, there&#8217;s an unfortunately some number of bounty hunters who will dramatize issues or nag you for bounty payment or swag every other day. Many don&#8217;t understand why it takes two weeks to get paid, why you disagree on their assessment of the problem, or will think that you&#8217;re lying to them when you say a bug has been reported in the past by another security researcher. These are annoying and often discouraging exceptions.</p>

<p>I believe in the need of acknowledging the hard work done by the security researchers by listing their name on our security page, unless they don&#8217;t want to. I want to thank each and every one of them.</p>

<p>I also do believe in the need to increase transparency into your process by listing the general category of issues after they have been fixed. I want users to trust us based on real data rather than on us just saying that we care about users&#8217; security and privacy. I think everyone understands that software has bugs, and I don&#8217;t see any good reason to hide the security ones after they have been fixed.</p>

<h2>In Conclusion and a Word About Education</h2>

<p>A security bug bounty helps our systems be more secureÂ and our users to trust us more. But that alone is not enough. Overtime the complexity of every system increases and the development team grows. We can only succeed at earning our users&#8217; trust if we actually spend time on security as a team. This includes teaching individual contributors how to avoid similar issues or entire classes of problems. I strongly encourage you to make a lot of extra effort to explain exploit vectors to all developers, using the issues reported by the Security Bug Bounty program as a starting point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transparent Prerequisite Network Requests with Swift and ReactiveCocoa]]></title>
    <link href="http://artsy.github.io/blog/2014/09/22/transparent-prerequisite-network-requests/"/>
    <updated>2014-09-22T11:26:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/22/transparent-prerequisite-network-requests</id>
    <content type="html"><![CDATA[<p>Artsy&#8217;s <a href="http://developers.artsy.net">API</a> requires something called an <a href="https://developers.artsy.net/docs/authentication">XApp
token</a> in order to perform
requests. The token comes back with an expiry date, after which the token will
no longer work. A new token will have to be fetched.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;xapp_token&quot;</span><span class="p">:</span> <span class="s2">&quot;SOME_TOKEN&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;expires_in&quot;</span><span class="p">:</span><span class="s2">&quot;2014-09-19T12:22:21.570Z&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our previous iOS apps, tragically written in Objective-C, we have a lot of
code that looks like the following. <code>getXappTokenWithCompletion:</code> checks to
make sure that there is a valid token. If there is, it invokes the completion
block immediately. Otherwise, it fetches a token, sets it in a static variable,
and then invokes the completion block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">ArtsyAPI</span> <span class="n">getXappTokenWithCompletion</span><span class="o">:^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">xappToken</span><span class="p">,</span> <span class="n">NSDate</span> <span class="o">*</span><span class="n">expirationDate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">ArtsyAPI</span> <span class="n">getSomething</span><span class="o">:^</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">// do something</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">failure</span><span class="o">:^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// handle herror</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s kind of ugly. A better approach might be to embed the token-requesting
logic within the <code>getSomething:</code> method. But that kind of sucks, since we&#8217;d have
to reproduce that logic for <em>every</em> network-accessing method. If we have ten
methods, that&#8217;s ten times we need to duplicate that logic.</p>

<p>With our <a href="https://github.com/artsy/eidolon">new app</a> (written in Swift), we&#8217;re
using a network abstraction layer we&#8217;ve created called <a href="https://github.com/AshFurrow/Moya">Moya</a>.
Moya sits on top of <a href="https://github.com/Alamofire/Alamofire">Alamofire</a> and
provides an abstraction for API endpoints. Instead of having ten different
network-accessing methods, there is only <em>one</em> method to which you pass one of
the ten different possible <code>enum</code> values. This means you have compile-time
safety in your networking code, but that&#8217;s not really what we&#8217;re here to talk
about.</p>

<p>Moya has this cool last-minute closure that it invokes to sign requests, so we
can sign these requests like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">endpointsClosure</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="n">target</span><span class="o">:</span> <span class="n">ArtsyAPI</span><span class="p">,</span> <span class="n">method</span><span class="o">:</span> <span class="n">Moya</span><span class="p">.</span><span class="n">Method</span><span class="p">,</span> <span class="n">parameters</span><span class="o">:</span> <span class="p">[</span><span class="n">String</span><span class="o">:</span> <span class="n">AnyObject</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Endpoint</span><span class="o">&lt;</span><span class="n">ArtsyAPI</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">endpoint</span><span class="o">:</span> <span class="n">Endpoint</span><span class="o">&lt;</span><span class="n">ArtsyAPI</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Endpoint</span><span class="o">&lt;</span><span class="n">ArtsyAPI</span><span class="o">&gt;</span><span class="p">(</span><span class="n">URL</span><span class="o">:</span> <span class="n">url</span><span class="p">(</span><span class="n">target</span><span class="p">),</span> <span class="n">sampleResponse</span><span class="o">:</span> <span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">target</span><span class="p">.</span><span class="n">sampleData</span><span class="p">),</span> <span class="n">method</span><span class="o">:</span> <span class="n">method</span><span class="p">,</span> <span class="n">parameters</span><span class="o">:</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Sign all non-XApp token requests</span>
</span><span class='line'>        <span class="k">switch</span> <span class="n">target</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="p">.</span><span class="n">XApp</span>:
</span><span class='line'>            <span class="k">return</span> <span class="n">endpoint</span>
</span><span class='line'>        <span class="nl">default:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">endpoint</span><span class="p">.</span><span class="n">endpointByAddingHTTPHeaderFields</span><span class="p">([</span><span class="s">&quot;X-Xapp-Token&quot;</span><span class="o">:</span> <span class="cm">/* global XApp token */</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&#8217;s kind of cool.</p>

<p>Since there is only <em>one</em> method for accessing the API, we can easily inject
the token-checking method there. Something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">public</span> <span class="n">func</span> <span class="nf">XAppRequest</span><span class="p">(</span><span class="n">token</span><span class="o">:</span> <span class="n">ArtsyAPI</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">MoyaCompletion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="cm">/* token is valid */</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">moyaProvider</span><span class="p">.</span><span class="n">sharedProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">completion</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">moyaProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">ArtsyAPI</span><span class="p">.</span><span class="n">XApp</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">statusCode</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
</span><span class='line'>          <span class="cm">/* store token somewhere */</span>
</span><span class='line'>          <span class="n">moyaProvider</span><span class="p">.</span><span class="n">sharedProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">completion</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s <em>better</em>, but it&#8217;s still kind of ugly. We&#8217;ve got duplicated code in
there, and we&#8217;re just kind of abstracting away the callback mess; it still
exists, we just don&#8217;t see if as often.</p>

<p>OK, so what alternative is there? Well, Moya supports a <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>
extension that uses <em>signals</em> instead of callback closures. Super-cool. So we
can rewrite our <code>XAppRequest</code> function to be the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">private</span> <span class="n">func</span> <span class="n">XAppTokenRequest</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">newTokenSignal</span> <span class="o">=</span> <span class="n">moyaProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">ArtsyAPI</span><span class="p">.</span><span class="n">XApp</span><span class="p">).</span><span class="n">filterSuccessfulStatusCodes</span><span class="p">().</span><span class="n">mapJSON</span><span class="p">().</span><span class="n">doNext</span><span class="p">({</span> <span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="cm">/* store new token globally */</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">logError</span><span class="p">().</span><span class="n">ignoreValues</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">validTokenSignal</span> <span class="o">=</span> <span class="n">RACSignal</span><span class="p">.</span><span class="err">`</span><span class="k">return</span><span class="err">`</span><span class="p">(</span><span class="cm">/* does the token exist and is valid? */</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">RACSignal</span><span class="p">.</span><span class="err">`</span><span class="k">if</span><span class="err">`</span><span class="p">(</span><span class="n">validTokenSignal</span><span class="p">,</span> <span class="n">then</span><span class="o">:</span> <span class="n">RACSignal</span><span class="p">.</span><span class="n">empty</span><span class="p">(),</span> <span class="err">`</span><span class="k">else</span><span class="err">`</span><span class="o">:</span> <span class="n">newTokenSignal</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">public</span> <span class="n">func</span> <span class="n">XAppRequest</span><span class="p">(</span><span class="n">token</span><span class="o">:</span> <span class="n">ArtsyAPI</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">XAppTokenRequest</span><span class="p">().</span><span class="n">then</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">RACSignal</span><span class="o">!</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">moyaProvider</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">method</span><span class="o">:</span> <span class="n">method</span><span class="p">,</span> <span class="n">parameters</span><span class="o">:</span> <span class="n">parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neato. So we have abstracted the &#8220;check if there is a valid token and get one if
there isn&#8217;t&#8221; into its own private method called <code>XAppTokenRequest</code>. If the token
exists and is valid, then the function returns <code>RACSignal.empty()</code>, a signal
which completes immediately. Otherwise, we perform a fetch, which completes
when the XApp token request is finished.</p>

<p>Then we just need to use <code>then</code> on <code>RACSignal</code> to create a new signal that is
generated once the <code>XAppTokenRequest</code> signal completes. Since the <code>then</code> closure
is only invoked once the <code>XAppTokenRequest</code> signal completes, the newly created
request signal will be generated after the token is set, which is ideal.</p>

<p>All the code above is kind of simplified. That&#8217;s OK, since it&#8217;s just a proof of
concept. If you want the full code, it&#8217;s all available <a href="https://github.com/artsy/eidolon/blob/1804044dfa8b22d9f765a621a5dbde357440146c/Kiosk/App/ArtsyAPI.swift#L87-L112">on GitHub</a>
and the conversation surrounding this change is in a <a href="https://github.com/artsy/eidolon/pull/29">merged pull request</a>.</p>

<p>If you have run into this problem and have a different solution, we&#8217;d love to
hear from you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing the Public Artsy API]]></title>
    <link href="http://artsy.github.io/blog/2014/09/12/designing-the-public-artsy-api/"/>
    <updated>2014-09-12T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/12/designing-the-public-artsy-api</id>
    <content type="html"><![CDATA[<p>Today we are happy to announce that we&#8217;re making a new public API generally available, along with over 26,000 artworks from many of our institutional partners.</p>

<p>The Artsy API currently provides access to images of historic artwork and related information on <a href="https://artsy.net">artsy.net</a> for educational and other non-commercial purposes. You can try it for playing, testing, and learning, but not yet for production. The scope of the API will expand in the future as it gains some traction.</p>

<p><a href="https://developers.artsy.net"><img src="http://artsy.github.io/images/2014-09-12-designing-the-public-artsy-api/the-art-world-in-your-app.png" border="0"></a></p>

<p>If you just want to use the API, you can stop reading here and head to the <a href="https://developers.artsy.net/">developers.artsy.net</a> website. (The developers website itself is a classic Rails + Boootstrap example and is also <a href="https://github.com/artsy/doppler">open-source</a>.)</p>

<p>In this post we will step back and describe some of the technical decisions made during the development of the new API.</p>

<!-- more -->


<h2>First, Make All The Mistakes</h2>

<p>Artsy has been developing a homegrown API over the last four years, consisting of almost 400 endpoints and exposing over 100 domain models. It&#8217;s probably one of the largest <a href="https://github.com/intridea/grape">Ruby Grape</a> implementations and it has been battlefield-tested by the dozens of services that we have built around it, starting with our <a href="https://github.com/artsy/force-public">recently open-sourced artsy.net website</a>. The core API project itself is unfortunately not public.</p>

<p>As with all legacy code with many client dependencies, our API has accumulated a staggering number of architectural faults, which have become impossible to work ourselves out of without a major rewrite. When thinking about a public API we went back to the drawing board with a more pragmatic approach.</p>

<h2>Use Hypermedia</h2>

<p>One of the common problems of being an API client is figuring out which routes an API provides or what data is available. For example, what can I do with this specific artwork? Documentation helps, but it often lacks such context. Furthermore, URLs are long and cumbersome to reference, parse and use. How can we make the API more developer-friendly and discoverable? Our answer was to settle on a well-known Hypermedia format. We chose <a href="http://stateless.co/hal_specification.html">HAL+JSON</a> because it is disciplined and very complete. Let me illustrate by example.</p>

<p>The <a href="https://api.artsy.net/api">API root</a> lists all the API routes within &#8220;_links&#8221;, such as &#8220;artists&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">artists:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artists&quot;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you fetch artists from the above URL, they will be returned in the same JSON+HAL format. Each artist will include a number of links, notably to the artist&#8217;s artworks. This is a perfect example of &#8220;context&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_embedded:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">artists:</span> <span class="err">[</span>
</span><span class='line'>      <span class="err">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">123,</span>
</span><span class='line'>        <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>          <span class="err">artworks:</span> <span class="err">{</span>
</span><span class='line'>            <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks?artist_id=123&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="err">}</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>    <span class="err">]</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is very powerful and makes it possible to write a generic API client that consumes any HAL+JSON API with just a bit of meta-programming. For Ruby, we provide examples using <a href="https://github.com/codegram/hyperclient">hyperclient</a>. Here&#8217;s a more complete example that retrieves a well-known artist, <a href="https://artsy.net/artist/gustav-klimt">Gustav Klimt</a>, and a few of his works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;hyperclient&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="o">=</span> <span class="no">Hyperclient</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;https://api.artsy.net/api&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">api</span><span class="o">|</span>
</span><span class='line'>  <span class="n">api</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s1">&#39;Accept&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/vnd.artsy-v2+json&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">api</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s1">&#39;X-Xapp-Token&#39;</span> <span class="o">=&gt;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">artist</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">links</span><span class="o">.</span><span class="n">artist</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;4d8b92b64eb68a1b2c000414&#39;</span><span class="p">)</span> <span class="c1"># Gustav Klimt</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">artist</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> was born in </span><span class="si">#{</span><span class="n">artist</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">birthday</span><span class="si">}</span><span class="s2"> in </span><span class="si">#{</span><span class="n">artist</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">hometown</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">artist</span><span class="o">.</span><span class="n">links</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">embedded</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">artwork</span><span class="o">.</span><span class="n">attributes</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Provide Canonical URLs for Resources</h2>

<p>In the past we returned different JSON payloads for a resource when it appeared within a collection vs. when it was retrieved individually. We have also developed solutions such as <a href="https://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a> to deal with this in a declarative way. However, clients were burdened to merge data. For example, our iOS application had to deal with the fact that different data existed in the local store for the same artwork depending on how a user navigated to it in the app.</p>

<p>With the new API each resource has a canonical, uniquely identifying, &#8220;self&#8221; link which is used to reference it from other resources. When a client encounters such a link and has already downloaded the resource, it can just swap the data without making an HTTP request. This is only possible because every single URL maps 1:1 with a specific JSON response - there&#8217;re no two data responses possible for the same URL. The retrieval of such data can be solved by a generic crawler - get a resource, fetch dependent resource links, iterate until you run out of links. Storage is even simpler and doesn&#8217;t have to know anything about our domain model since it just maps URLs to JSON bodies.</p>

<h2>Partition Data and Perform Access Controls at API Level</h2>

<p>Because we decided not to return two different types of responses for a given model, we needed to partition data at the model level. For example, we introduced publicly available <a href="https://developers.artsy.net/docs/users">Users</a> and private <a href="https://developers.artsy.net/docs/user_details">User Details</a>. Access controls are now done exclusively at the API level.</p>

<p>The API developer must simply answer the question of whether a client is authorized to retrieve a resource or not. The API will return a 403 or 404 otherwise and it&#8217;s not necessary to customize the response for different types of access.</p>

<h2>Be Disciplined About Data Access and NxM Queries</h2>

<p>The performance of APIs that return collections of objects has been a constant struggle. The initial API design attempted to help clients make the least amount of HTTP requests possible, often requiring many NxM server-side queries. This actually had a profoundly negative impact on overall performance and user experience than we have ever anticipated. Servers had to allocate a lot more memory to parse, render and cache very large JSON payloads, also causing larger garbage collection cycles. Web applications seemed slower because a lot of data had to be retrieved to render anything on initial page load. Mobile clients spend a lot more time parsing huge JSON payloads, requiring a lot of CPU and yielding rarely. This created a very sluggish user experience and much longer delays waiting for background processing to finish. To mitigate this and keep our API response times low on the server we had to leverage complicated caching schemes with <a href="https://github.com/artsy/garner">garner</a> and had to fine-tune Mongoid&#8217;s eager-loading endpoint by endpoint.</p>

<p>For the new API we decided to never return relational data for a given model and refactor relations at the API model level when necessary. For example, we do not return artist information with a given artwork, but we do return a collection of artist links (an artwork can be created by a group of artists).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">_embedded:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">artist_links:</span> <span class="err">[</span>
</span><span class='line'>      <span class="err">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="nt">&quot;4fe8862daa12fb00010017b9&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>          <span class="err">artist:</span> <span class="err">{</span>
</span><span class='line'>            <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artists/4fe8862daa12fb00010017b9&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="err">}</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>    <span class="err">],</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can still leverage the fact that we do have embedded objects in MongoDB and the fact that HAL supports embedded data. For example, we always return editions embedded within an artwork. Being disciplined about this allows the server to make one database query for one API request.</p>

<p>Furthermore, creating such rigid rules forces us to never optimize for a specific client&#8217;s scenario. That said, we still want to make life easy for developers that need bulk loading of various resources. We plan to implement a <a href="http://techblog.netflix.com/2012/07/embracing-differences-inside-netflix.html">Netflix API</a>-style middleware, where you can supply a set of URLs and get back a single, full JSON response with many different embedded resources. HAL+JSON&#8217;s disciplined structure makes mixing data very easy.</p>

<h2>Use Media Types and Accept Headers for Versioning</h2>

<p>Our initial API lives under a versioned URL which includes &#8220;v1&#8221;. For the new API we decided to adopt a different model and use an &#8220;Accept&#8221; header which currently takes an optional &#8220;application/vnd.artsy-v2+json&#8221; media type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$</span> <span class="err">curl</span> <span class="err">&#39;http://api.artsy.net/api&#39;</span> <span class="err">-H</span> <span class="err">&#39;Accept:application/vnd.artsy-v</span><span class="mi">2</span><span class="err">+json&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accept headers in the API context can be used to indicate that the request is specifically limited to an API version. Our API will serve a backward compatible format by default. However, when we decide change the format of a resource we will increment the API version and require a newer value in the header to retrieve it. The new version can become the default only after the old version has been fully deprecated.</p>

<h2>Create a Flat API Structure and Leverage 302 Redirects</h2>

<p>Our old API served all artworks from &#8220;/artworks&#8221; and artworks belonging to a partner from &#8220;/partner/:id/artworks&#8221;. This was convenient, but made obsolete by a Hypermedia API. API URL structure no longer matters, because you no longer have to build URLs yourself, but follow links instead.</p>

<p>We decided to expose all models at the root and to use query string parameters for filtering. The API uses a plural for all routes, so you can query both &#8220;/artworks&#8221; and &#8220;/artworks/:artwork_id&#8221;. At the Hypermedia API root level those differences are expressed in a declarative way in the shape of link templates with a singular (an artwork) or a plural (artworks) key, and all possible parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">artworks:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks{?public,artist_id}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">templated:</span> <span class="err">true</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">artwork:</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks/{id}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="err">templated:</span> <span class="err">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We leverage 302 redirects extensively. For example, querying &#8220;/current_user&#8221; redirects to &#8220;/users/:user_id&#8221; with a 302 status code (we cannot serve different content per user at the root of the API, as explained in a section above). Another good example is that the current API only provides access to public domain artworks, so if you navigate to &#8220;/artworks&#8221;, you will currently be redirected to &#8220;/artworks?public=true&#8221;, making this scheme future-proof.</p>

<h2>Do Not Paginate with Pages and Offsets</h2>

<p>Our original API accepted &#8220;page&#8221; or &#8220;offset&#8221; parameters. This was rather problematic for changing collections. Consider what happens when you are on page 5 and an item is inserted on page 4. Your next set of results for page 6 will include a duplicate that has just moved from page 5 onto page 6. Similarly, if an item was removed from page 4, a request to page 6 will skip an item that now appears on page 5.</p>

<p>Our new API returns subsets of collections with &#8220;next&#8221; links and optional counts. To fetch a subsequent page, follow the &#8220;next&#8221; link, which accepts an opaque &#8220;cursor&#8221; (internally we use the <a href="https://github.com/dblock/mongoid-scroll">mongoid-scroll</a> Ruby gem). The cursor retains position in a collection, including when an item has been deleted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">total_count:</span> <span class="err">26074,</span>
</span><span class='line'>  <span class="err">_links:</span> <span class="err">{</span>
</span><span class='line'>    <span class="err">self:</span> <span class="err">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks?public=true&quot;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">next:</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">href:</span> <span class="nt">&quot;https://api.artsy.net/api/artworks?cursor=...&amp;public=true&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also wanted to solve the problem of querying different page sizes as we often wanted to retrieve just a couple of items quickly on an initial page load, then make larger requests for subsequent pages as the user scrolled, or vice-versa. You can now supply &#8220;size&#8221; to all collection APIs and a cursored approach makes it possible to vary the number on every request.</p>

<p>To get the &#8220;total_count&#8221;, we decided to require clients to append &#8220;?total_count=true&#8221; to the query string. It&#8217;s not necessary to do all that counting work on the server side if you&#8217;re not going to use the data.</p>

<h2>Standardize Error Format</h2>

<p>We use HTTP error codes, however we also use JSON data that comes with those errors for additional, often humanly readable descriptions. We settled on a standard error format that includes a &#8220;type&#8221; and a &#8220;message&#8221;. For example, a 401 Unauthorized response will also carry the following payload.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">type:</span> <span class="nt">&quot;auth_error&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="err">message:</span> <span class="nt">&quot;The access token is invalid or has expired.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>We tried to stay pragmatic with our approach and still have time and room for improvements. We would love to hear from you on our <a href="http://groups.google.com/group/artsy-api-developers/subscribe">API developers mailing list</a> and hope you&#8217;ll give our new API a try at <a href="https://developers.artsy.net/">developers.artsy.net</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We open sourced our Isomorphic Javascript website]]></title>
    <link href="http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website/"/>
    <updated>2014-09-05T15:09:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/09/05/we-open-sourced-our-isomorphic-javascript-website</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/force.png" alt="May The Force be With You" /></p>

<p>Today we&#8217;re happy to announce we&#8217;ve open sourced the entire Artsy.net web app, <a href="https://github.com/artsy/force-public">Force</a>.</p>

<p>Over the past few months, we&#8217;ve rewritten our web front-end to move off Rails and on to a <a href="http://nodejs.org/">Node.js</a> stack that shares Javascript code and rendering between the server and client, otherwise known as <a href="http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/">Isomorphic Javascript</a>. After migrating to this new stack, we open-sourced our boilerplate, <a href="http://ezeljs.com">Ezel</a>, and have now gone a step further and open sourced Artsy.net.</p>

<!-- more -->


<h2>Isomorphic vs Monolithic</h2>

<p>Our transition to an isomorphic Javascript stack has been very successful albeit with some speed bumps. If you&#8217;re interested in the details we&#8217;ve written <a href="http://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/">a blog post</a>, given a talk at <a href="https://www.joyent.com/developers/videos/node-js-on-the-road-nyc-craig-spaeth-brennan-moore">Node on the Road</a> (slides <a href="http://www.slideshare.net/craigspaeth/artsy-node-on-the-roady-slides">here</a>), and another more extensive talk at <a href="http://www.hakkalabs.co/articles/monolithic-to-distributed-how-artsy-transitioned-from-ruby-on-rails-to-node-js-and-isomorphic-javascript#">this meetup</a>.</p>

<p>The short story is that we moved from a monolithic rails app to a couple of Node servers on Heroku. This vastly improved the performance of our site and our own development speed. Using the patters in Ezel, we are able to tailor assets packages to specific pages and render some of the page on the server. This cut our page-load in half (from 6.5 seconds to under 3 seconds) and our tests take about 5 minutes (down from around 5 hours!) with little reduction in coverage. Performance numbers aside, our real win was dramatically improved development speed due to some architecture decisions we made.</p>

<h2>Modularity</h2>

<p><a href="https://artsy.net/artwork/nathan-sawaya-red-head"><img src="http://artsy.github.io/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/sawaya.jpg" alt="Nathan Sawaya, Red Head, 2009" /></a></p>

<p>One of the biggest takeaways from the transition is the pleasure of modularity. By breaking our project up into smaller reusable pieces such as <a href="https://github.com/artsy/ezel#project-vs-apps-vs-components">apps &amp; components</a> we make it easier to experiment, test, and refactor with confidence knowing our code is encapsulated into clearly defined pieces.</p>

<p>For instance, we recently redesigned our <a href="https://artsy.net/about">about</a> page. To gradually introduce the new page, we simply started a new about2 app along side our old about app which you can see <a href="https://github.com/artsy/force-public/tree/0d5a49da08e94a91b3f23c7cd1005c1e83da7ba5/apps">a little back in Force&#8217;s history</a>. This let us push code into the new about2 app with confidence it wasn&#8217;t touching other parts of the stack. When it was time to ship it, we simply deleted the old about app folder and search and replaced &#8220;about2&#8221; to &#8220;about&#8221;. There was no need to dig around various stylesheets, views, etc. folders looking for places where code for the old about page might still live.</p>

<p><a href="https://github.com/artsy/ezel#components">Components</a> are particularly useful for re-usability. For instance building <a href="https://artsy.net/gene/abstract-expressionism">this gene page</a> (source code <a href="https://github.com/artsy/force-public/tree/master/apps/gene">here</a>) was mostly a matter of pulling in various components like a <a href="https://github.com/artsy/force-public/tree/master/components/follow_button">follow button</a>, a <a href="https://github.com/artsy/force-public/tree/master/components/filter">filter</a> component, this <a href="https://github.com/artsy/force-public/tree/master/components/artist_fillwidth_list">artist fill-width layout</a>, etc. Because the CSS for those components are clearly self-contained it&#8217;s easy to build up a small asset package that uses only the minimal CSS needed which you can see <a href="https://github.com/artsy/force-public/blob/master/assets/gene.styl">here</a>.</p>

<p>We&#8217;re so convinced this encapsulation is important that we&#8217;ve updated Ezel to <a href="https://github.com/artsy/ezel/tree/master/src/js-example/apps/commits/public/images">use app/component-level public folders</a> by default so you can even modularize static assets, like images, and keep them coupled with their respective apps/components.</p>

<h2>Open Source by Default</h2>

<p><img src="http://artsy.github.io/images/2014-09-05-we-open-sourced-our-isomorphic-javascript-website/octocat.jpg" alt="Ocotcat" /></p>

<p>Even though Force isn&#8217;t a library, we have open-soured many of its components and libraries. Before open sourcing Force, we open sourced app-specific modules such as <a href="https://github.com/artsy/artsy-backbone-mixins">these backbone mixins</a> <a href="https://github.com/artsy/artsy-passport">this Artsy API authentication library</a>, or <a href="https://github.com/artsy/backbone-cache-sync">this module</a> we use to cache server-side Backbone requests.</p>

<p>Open-sourcing Force was pretty straightforward but we needed to make our sensitive keys/secrets private while not complicating development. To do this we wrote a .env file and uploaded it as a private gist that gets downloaded when setting up the app. We wanted to spread this open-source-by-default culture so we decided to update Ezel&#8217;s configuration to be able to use a .env file in this way as well. This makes it easy keep your sensitive configuration data private while allowing the rest of your app code to be open source. You can read more about this in Ezel&#8217;s <a href="https://github.com/artsy/ezel#build-scripts--configuration">Build Scripts &amp; Configuration docs</a>.</p>

<h2>Spreading The Love</h2>

<p>Force serves as an example of how we structured a large <a href="http://ezeljs.com">Ezel</a> project and contains the full commit history of its construction. Unfortunately, due to image licensing issues, we cannot open up the Artsy API and therefore this repository can&#8217;t serve as a runnable clone of our website. However, we will continue to merge our production code into it. If you have any questions feel free to hit us up on twitter: <a href="https://twitter.com/craigspaeth">@craigspaeth</a>, <a href="https://twitter.com/dzucconi">@dzucconi</a>, <a href="https://twitter.com/zamiang">@zamiang</a>.</p>

<p>We&#8217;re excited to continue pushing open source at Artsy. For more exciting open source projects take a look at <a href="https://github.com/artsy">our Github profile</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CocoaPods Caching with Travis CI]]></title>
    <link href="http://artsy.github.io/blog/2014/08/08/CocoaPods-Caching/"/>
    <updated>2014-08-08T11:46:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/08/CocoaPods-Caching</id>
    <content type="html"><![CDATA[<p>As <a href="http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/">Ash said earlier</a> we like using Continuous Integration. Today I spent a large amount of time migrating us to use the new CocoaPods caching system in Travis CI. To make up for my lost time I&#8217;m passing on what I&#8217;ve learned and also showing how we do CI at Artsy with Objective-C apps. If you&#8217;re interested in how we do it in Swift, you can just check <a href="https://github.com/artsy/eidolon">Eidolon</a>.</p>

<!-- more -->


<p>First and foremost, this only works if you are paying for Travis CI.</p>

<p>Travis CI recently merged in support for <a href="http://docs.travis-ci.com/user/caching/">Caching of CocoaPods</a> - this is great! By using this, we&#8217;ve reduced our build times from an average of about 10 minutes, to about 7 minutes. It works by using your <code>Podfile.lock</code> as a key to cache your <code>Pods</code> directory, if the lock hasn&#8217;t changed then there&#8217;s no need to update the Cache and so <code>pod install</code> is not called on your project. This caused me an issue as the <code>[Project].xcworkspace</code> file that CocoaPods generates was not in source control, and the app wouldn&#8217;t build. Useful note, if you&#8217;re using <a href="http://guides.cocoapods.org/syntax/podfile.html#pod">development pods</a> in your build you probably shouldn&#8217;t use this as your Pods directory can get out of sync with the cached version.</p>

<p>We use a <a href="https://github.com/artsy/eidolon/blob/master/Makefile">Makefile</a> to separate the tasks required to build, test and deploy an app. The general structure of our Makefile is:</p>

<table>
<thead>
<tr>
<th> Action        </th>
<th> Reason </th>
</tr>
</thead>
<tbody>
<tr>
<td> Constants </td>
<td> A collection of constants that get resued by different make tasks. </td>
</tr>
<tr>
<td> CI Tasks </td>
<td> Separate commands necessary for running Xcode projects from the terminal. </td>
</tr>
<tr>
<td> Actions </td>
<td> Commands that manipulate your project state, or maintainance commands. </td>
</tr>
<tr>
<td> Deployment </td>
<td> Commands to get your app ready for the App Store, or Hockey. </td>
</tr>
</tbody>
</table>


<p>If you don&#8217;t know the syntax for Make, essentially if it&#8217;s on the same line you&#8217;re either setting constants or calling other make commands. If it&#8217;s on a separate line then you are running a shell command.</p>

<p>This is the <a href="http://orta.io/#folio-header-unit">Artsy Folio</a> Makefile in full:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="c"># Constants</span>
</span><span class='line'>
</span><span class='line'><span class="nv">WORKSPACE</span> <span class="o">=</span> Artsy Folio.xcworkspace
</span><span class='line'><span class="nv">XCPROJECT</span> <span class="o">=</span> Artsy<span class="se">\ </span>Folio.xcodeproj
</span><span class='line'><span class="nv">SCHEME</span> <span class="o">=</span> ArtsyFolio
</span><span class='line'><span class="nv">CONFIGURATION</span> <span class="o">=</span> Beta
</span><span class='line'><span class="nv">APP_PLIST</span> <span class="o">=</span> Info.plist
</span><span class='line'><span class="nv">PLIST_BUDDY</span> <span class="o">=</span> /usr/libexec/PlistBuddy
</span><span class='line'><span class="nv">TARGETED_DEVICE_FAMILY</span> <span class="o">=</span> <span class="se">\&quot;</span>1,2<span class="se">\&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">BUNDLE_VERSION</span> <span class="o">=</span> <span class="k">$(</span>shell <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Print CFBundleVersion&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">))</span>
</span><span class='line'><span class="nv">GIT_COMMIT</span> <span class="o">=</span> <span class="k">$(</span>shell git log -n1 --format<span class="o">=</span><span class="s1">&#39;%h&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">ALPHA_VERSION</span> <span class="o">=</span> <span class="k">$(</span>BUNDLE_VERSION<span class="k">)</span>-<span class="k">$(</span>BUILD_NUMBER<span class="k">)</span>-<span class="k">$(</span>GIT_COMMIT<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">GIT_COMMIT_REV</span> <span class="o">=</span> <span class="k">$(</span>shell git log -n1 --format<span class="o">=</span><span class="s1">&#39;%h&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">GIT_COMMIT_SHA</span> <span class="o">=</span> <span class="k">$(</span>shell git log -n1 --format<span class="o">=</span><span class="s1">&#39;%H&#39;</span><span class="k">)</span>
</span><span class='line'><span class="nv">GIT_REMOTE_ORIGIN_URL</span> <span class="o">=</span> <span class="k">$(</span>shell git config --get remote.origin.url<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DATE_MONTH</span> <span class="o">=</span> <span class="k">$(</span>shell date <span class="s2">&quot;+%e %h&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">DATE_VERSION</span> <span class="o">=</span> <span class="k">$(</span>shell date <span class="s2">&quot;+%Y.%m.%d&quot;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">CHANGELOG</span> <span class="o">=</span> CHANGELOG.md
</span><span class='line'><span class="nv">CHANGELOG_SHORT</span> <span class="o">=</span> CHANGELOG_SHORT.md
</span><span class='line'>
</span><span class='line'><span class="nv">IPA</span> <span class="o">=</span> ArtsyFolio.ipa
</span><span class='line'><span class="nv">DSYM</span> <span class="o">=</span> ArtsyFolio.app.dSYM.zip
</span><span class='line'>
</span><span class='line'><span class="c"># Phony tasks are tasks that could potentially have a file with the same name in the current folder</span>
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="m">build clean test ci</span>
</span><span class='line'>
</span><span class='line'><span class="c"># CI Tasks</span>
</span><span class='line'>
</span><span class='line'><span class="nf">ci</span><span class="o">:</span> <span class="m">CONFIGURATION = Debug</span>
</span><span class='line'><span class="nf">ci</span><span class="o">:</span> <span class="m">pods build</span>
</span><span class='line'>
</span><span class='line'><span class="nf">build</span><span class="o">:</span>
</span><span class='line'>  <span class="nb">set</span> -o pipefail <span class="o">&amp;&amp;</span> xcodebuild -workspace <span class="s2">&quot;$(WORKSPACE)&quot;</span> -scheme <span class="s2">&quot;$(SCHEME)&quot;</span> -sdk iphonesimulator -destination <span class="s1">&#39;name=iPad Retina&#39;</span> build | xcpretty -c
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  xctool -workspace <span class="s2">&quot;$(WORKSPACE)&quot;</span> -scheme <span class="s2">&quot;$(SCHEME)&quot;</span> -configuration <span class="s2">&quot;$(CONFIGURATION)&quot;</span> clean
</span><span class='line'>
</span><span class='line'><span class="nf">test</span><span class="o">:</span>
</span><span class='line'>  <span class="nb">set</span> -o pipefail <span class="o">&amp;&amp;</span> xcodebuild -workspace <span class="s2">&quot;$(WORKSPACE)&quot;</span> -scheme <span class="s2">&quot;$(SCHEME)&quot;</span> -configuration Debug <span class="nb">test</span> -sdk iphonesimulator -destination <span class="s1">&#39;name=iPad Retina&#39;</span> | second_curtain | xcpretty -c --test
</span><span class='line'>
</span><span class='line'><span class="nf">lint</span><span class="o">:</span>
</span><span class='line'>  bundle <span class="nb">exec </span>fui --path Classes find
</span><span class='line'>
</span><span class='line'>  bundle <span class="nb">exec </span>obcd --path Classes find HeaderStyle
</span><span class='line'>  bundle <span class="nb">exec </span>obcd --path <span class="s2">&quot;ArtsyFolio Tests&quot;</span> find HeaderStyle
</span><span class='line'>
</span><span class='line'><span class="c"># Actions</span>
</span><span class='line'>
</span><span class='line'><span class="nf">ipa</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleDisplayName $(BUNDLE_NAME)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleVersion $(DATE_VERSION)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  ipa build --scheme <span class="k">$(</span>SCHEME<span class="k">)</span> --configuration <span class="k">$(</span>CONFIGURATION<span class="k">)</span> -t
</span><span class='line'>
</span><span class='line'><span class="nf">alpha_version</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleVersion $(ALPHA_VERSION)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">change_version_to_date</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleVersion $(DATE_VERSION)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">set_git_properties</span><span class="o">:</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set GITCommitRev $(GIT_COMMIT_REV)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set GITCommitSha $(GIT_COMMIT_SHA)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>  <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set GITRemoteOriginURL $(GIT_REMOTE_ORIGIN_URL)&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pods</span><span class="o">:</span> <span class="m">remove_debug_pods</span>
</span><span class='line'><span class="nf">pods</span><span class="o">:</span>
</span><span class='line'>  rm -rf Pods
</span><span class='line'>  bundle install
</span><span class='line'>  bundle <span class="nb">exec </span>pod install
</span><span class='line'>
</span><span class='line'><span class="nf">remove_debug_pods</span><span class="o">:</span>
</span><span class='line'>  perl -pi -w -e <span class="s2">&quot;s{pod &#39;Reveal-iOS-SDK&#39;}{}g&quot;</span> Podfile
</span><span class='line'>
</span><span class='line'><span class="nf">update_bundle_version</span><span class="o">:</span>
</span><span class='line'>  @printf <span class="s1">&#39;What is the new human-readable release version? &#39;</span>; <span class="se">\</span>
</span><span class='line'>      <span class="nb">read </span>HUMAN_VERSION; <span class="se">\</span>
</span><span class='line'>      <span class="k">$(</span>PLIST_BUDDY<span class="k">)</span> -c <span class="s2">&quot;Set CFBundleShortVersionString $$HUMAN_VERSION&quot;</span> <span class="k">$(</span>APP_PLIST<span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">mogenerate</span><span class="o">:</span>
</span><span class='line'>  @printf <span class="s1">&#39;What is the new Core Data version? &#39;</span>; <span class="se">\</span>
</span><span class='line'>      <span class="nb">read </span>CORE_DATA_VERSION; <span class="se">\</span>
</span><span class='line'>      mogenerator -m <span class="s2">&quot;Resources/CoreData/ArtsyPartner.xcdatamodeld/ArtsyFolio v$$CORE_DATA_VERSION.xcdatamodel/&quot;</span> --base-class ARManagedObject --template-path config/mogenerator/artsy --machine-dir Classes/Models/Generated/ --human-dir /tmp/ --template-var <span class="nv">arc</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Deployment</span>
</span><span class='line'>
</span><span class='line'><span class="nf">deploy</span><span class="o">:</span> <span class="m">ipa distribute</span>
</span><span class='line'>
</span><span class='line'><span class="nf">alpha</span><span class="o">:</span> <span class="m">BUNDLE_NAME = &#39;Folio Î±&#39;</span>
</span><span class='line'><span class="nf">alpha</span><span class="o">:</span> <span class="m">NOTIFY = 0</span>
</span><span class='line'><span class="nf">alpha</span><span class="o">:</span> <span class="m">alpha_version deploy</span>
</span><span class='line'>
</span><span class='line'><span class="nf">appstore</span><span class="o">:</span> <span class="m">BUNDLE_NAME = &#39;Artsy Folio&#39;</span>
</span><span class='line'><span class="nf">appstore</span><span class="o">:</span> <span class="m">TARGETED_DEVICE_FAMILY = 2</span>
</span><span class='line'><span class="nf">appstore</span><span class="o">:</span> <span class="m">remove_debug_pods update_bundle_version set_git_properties change_version_to_date</span>
</span><span class='line'>
</span><span class='line'><span class="nf">next</span><span class="o">:</span> <span class="m">TARGETED_DEVICE_FAMILY = </span>\&quot;<span class="m">1</span><span class="p">,</span><span class="m">2</span>\&quot;
</span><span class='line'><span class="nf">next</span><span class="o">:</span> <span class="m">update_bundle_version set_git_properties change_version_to_date</span>
</span><span class='line'>
</span><span class='line'><span class="nf">distribute</span><span class="o">:</span>
</span><span class='line'>  cat <span class="k">$(</span>CHANGELOG<span class="k">)</span> | head -n 50 | awk <span class="s1">&#39;{ print } END { print &quot;...&quot; }&#39;</span> &gt; <span class="k">$(</span>CHANGELOG_SHORT<span class="k">)</span>
</span><span class='line'>  curl <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">status</span><span class="o">=</span>2 <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">notify</span><span class="o">=</span><span class="k">$(</span>NOTIFY<span class="k">)</span> <span class="se">\</span>
</span><span class='line'>   -F <span class="s2">&quot;notes=&lt;$(CHANGELOG_SHORT)&quot;</span> <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">notes_type</span><span class="o">=</span>1 <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">ipa</span><span class="o">=</span>@<span class="k">$(</span>IPA<span class="k">)</span> <span class="se">\</span>
</span><span class='line'>   -F <span class="nv">dsym</span><span class="o">=</span>@<span class="k">$(</span>DSYM<span class="k">)</span> <span class="se">\</span>
</span><span class='line'>   -H <span class="s1">&#39;X-HockeyAppToken: $(HOCKEYAPP_TOKEN)&#39;</span> <span class="se">\</span>
</span><span class='line'>   https://rink.hockeyapp.net/api/2/apps/upload <span class="se">\</span>
</span><span class='line'>   | grep -v <span class="s2">&quot;errors&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That gives you a sense of the commands that you can run from the terminal in our projects, next we need to look at the <code>.travis.yml</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nf">language</span><span class="o">:</span> <span class="m">objective-c</span>
</span><span class='line'><span class="nf">cache</span><span class="o">:</span>
</span><span class='line'>  - bundler
</span><span class='line'>  - cocoapods
</span><span class='line'>
</span><span class='line'><span class="nf">env</span><span class="o">:</span>
</span><span class='line'>  - <span class="nv">UPLOAD_IOS_SNAPSHOT_BUCKET_NAME</span><span class="o">=</span>eigen-ci UPLOAD_IOS_SNAPSHOT_BUCKET_PR...
</span><span class='line'>
</span><span class='line'><span class="nf">before_install</span><span class="o">:</span>
</span><span class='line'>  - <span class="s1">&#39;echo &#39;&#39;gem: --no-ri --no-rdoc&#39;&#39; &gt; ~/.gemrc&#39;</span>
</span><span class='line'>  - cp .netrc ~
</span><span class='line'>  - chmod 600 .netrc
</span><span class='line'>  - pod repo add artsy https://github.com/artsy/Specs.git
</span><span class='line'>
</span><span class='line'><span class="nf">before_script</span><span class="o">:</span>
</span><span class='line'>  - gem install second_curtain
</span><span class='line'>  - make ci
</span><span class='line'>
</span><span class='line'><span class="nf">script</span><span class="o">:</span>
</span><span class='line'>  - make <span class="nb">test</span>
</span><span class='line'>  - make lint
</span></code></pre></td></tr></table></div></figure>


<p>This is nice and simple. It was built to use multiple travis build steps. This makes the CI output a lot more readable as an end user. Travis will by default collapse the shell output for different build stages leaving only the <code>script</code> stage defaulting to being exposed. Here is an example of what you see on a failing test:</p>

<center>
<img src="http://artsy.github.io/images/2014-08-08-CocoaPods-Caching/failing_travis_screenshot.png" alt='Travis CI Failure'>
</center>


<p>We use a gem with a binary in <a href="https://github.com/AshFurrow/second_curtain/">second_curtain</a>, and this came with bundler caching issues in Travis. The solution was to ignore bundler and run <code>gem install second_curtain</code> each time. To increase the speed we also ensured that documentation is not being generated. If you are interested in what&#8217;s going on with the <code>.netrc</code>, read my blog post on <a href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/">Artsy&#8217;s first Closed Source Pod</a>.</p>

<p>We will continue pushing the state of the art in iOS deployment, in building our own tools and using everything available to increase developer happiness. If you&#8217;re into this we&#8217;re always looking to hire people with a good open source track record or street smarts. Here&#8217;s <a href="https://artsy.net/job/mobile-engineer">the jobs page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking a Snapshot with Second Curtain]]></title>
    <link href="http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain/"/>
    <updated>2014-08-07T11:46:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/07/taking-a-snapshot-with-second-curtain</id>
    <content type="html"><![CDATA[<p>At Artsy, we try hard to <a href="https://speakerdeck.com/orta/getting-eigen-out?slide=35">test</a>
our iOS applications to ensure that we avoid regressions and have a clearly
defined spec of how our apps should look and behave. One of the core pieces of
our testing setup is <a href="https://github.com/facebook/ios-snapshot-test-case">FBSnapshotTestCase</a>,
a library written by Facebook to compare views at runtime with images of those
views that are known to be correct. If the images differ, the test fails. We
also use <a href="https://travis-ci.org">Travis</a> for continuous integration.</p>

<p>Lately, we&#8217;ve been noticing a friction between the developers on the iOS team
and the tools we&#8217;re using to test our apps: while Travis allows us to easily
access the logs of test runs, it can only indicate that a snapshot test failed,
not why it failed. That&#8217;s because the images that are compared are locked on
Travis&#8217; machine â we cannot access those images, so we can&#8217;t see the
differences. This is <em>really</em> promblematic when the tests pass locally but fail
only on Travis.</p>

<!-- more -->


<p>A few weeks ago, <a href="http://twitter.com/orta">Orta</a> and I were discussing this
problem and we came up with a potential solution. Since the images were stored
on disk on Travis&#8217; machine, why not just upload them somewhere we <em>can</em> see
them? Like an S3 bucket. We could even generate a basic HTML page showing you
the different test failures.</p>

<p>Time passed and, later on, I had tests passing locally but failing on Travis.
I saw an opportunity to build something new. I&#8217;m not a proficient Ruby developer,
but I enjoy learning new things, so I decided to create a Ruby gem that could
fit within our existing testing pipeline. A lot of the structure for the code
came from an existing gem we already use with Travis, <a href="https://github.com/supermarin/xcpretty">xcpretty</a>.
With an example of how gems that support iOS testing are written, I was on my
way to creating my own.</p>

<p>At first, things were very difficult. While I had contributed small patches to
existing Ruby projects before, I had never created a brand new one from scratch.
The existing <a href="http://guides.rubygems.org/make-your-own-gem/">guides</a> were very
helpful, and I found help from the CocoaPods developers when I had questions
about things like the arcane semantics of Ruby&#8217;s <code>require</code> syntax.</p>

<p>Eventually, I had a working proof-of-concept. Everything seemed ready to go, and
I prepared to incorporate my new tool, which I called <a href="https://github.com/AshFurrow/second_curtain">Second Curtain</a>,
into my pull request on the Artsy repo. But there was a problem.</p>

<p>Second Curtain relies on environment variables to get access to the S3 bucket
where it stores the images. I planned on using Travis&#8217; system to <a href="http://docs.travis-ci.com/user/encryption-keys/">encrypt</a>
those credentials. It turns out, for very good reasons, encrypted environment
variables are not available on pull requests created on forks of repositories.
This is a problem because of the way that <a href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/">Artsy uses GitHub</a>.
While it&#8217;s not a problem for a closed-source repository to have (restrictive)
access to an S3 bucket, it would be irresponsible to expose S3 credentials for
an open-source project. I&#8217;m <a href="https://github.com/AshFurrow/second_curtain/issues/5">working</a>
on a solution.</p>

<p>Orta helped with the design aspect of the tool; while uploading the images was
sufficient, we could make the process of seeing the differences between the two
images even easier. He created a <a href="https://eigen-ci.s3.amazonaws.com/snapshots/2014-08-04--15-47/index.html">HTML page</a>
that would allow developers to see the before-and-after versions by moving their
mouse cursor over the different images.</p>

<p><img src="http://static.ashfurrow.com/github/second_curtain.png" alt="Image Diff" /></p>

<p>In the end, I got Second Curtain to work with Artsy&#8217;s iOS repository and I
discovered the discrepency between the two images: due to a timezone difference
between my computer and Travis&#8217;, a date was being formatted differently. Not a
difficult thing to fix, but not something I would have ever been able to
discover had I not been able to see the images side-by-side.</p>

<p>So after all that, one line of Objective-C was changed and the tests passed â my
pull request was merged. I learnt a lot about how Ruby developers structure
their code and what tools they use to write software. While I&#8217;m happy to return
to iOS apps for a while, it was a great experience and I&#8217;m hoping to bring some
of the ideas I discovered writing Ruby back to Objective-C.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect-Oriented Programming and ARAnalytics]]></title>
    <link href="http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics/"/>
    <updated>2014-08-04T14:52:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics</id>
    <content type="html"><![CDATA[<p>Analytics are common in iOS applications. They help inform our decisions
about products. Since analytics are so common, Artsy developed a library called
<a href="https://github.com/orta/ARAnalytics">ARAnalytics</a>. This library provides a
single interface to many different backend analytics providers, freeing
developers from having to write code for each of the providers that they&#8217;re
using.</p>

<p>Let&#8217;s consider a typical view controller on iOS. View controllers on iOS
represent the glue code between models and views. When a model changes, the view
controller updates the appearance of the UI. Similarly, when the UI is
interacted with by the user, the view controller updates the model. This is the
core of any standard iOS application.</p>

<p>So let&#8217;s say that a button is pressed. We&#8217;ll handle that interaction in a
method called <code>buttonWasPressed:</code>. We&#8217;ll want to update our model, but also to
track the analytics event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">buttonWasPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">hearted</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">event</span><span class="o">:</span><span class="s">@&quot;hearted&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough, but consider that the analytics tracking code doesn&#8217;t fall within
our definition of a view controller âÂ the button handler just happens to be a
convenient place to put the tracking code. Also consider that <em>every single</em>
button handler is going to have to have similar code implemented.</p>

<h2>There has to be a better way.</h2>

<!-- more -->


<p><a href="http://twitter.com/steipete">Pete Steinberger</a> and <a href="http://twitter.com/orta">Orta Therox</a>
were talking and the topic of <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-Oriented Programming</a>,
specifically in the context of analytics. AOP takes a look at the different
<em>conerns</em> of an application â logical, cohesive units of functionality. While
most programming paradigms, including those used with Objective-C, group and
encapsulate these concerns, there are some concerns that are &#8220;cross-cutting&#8221;
because they are involved through several other concerns.</p>

<p>Analytics is such a cross-cutting concern. That makes it a prime target for
being abstracted away using AOP. Using <a href="http://albertodebortoli.github.io/blog/2014/03/25/an-aspect-oriented-approach-programming-to-ios-analytics/">another blog post</a>  as an example, we set about <a href="https://github.com/orta/ARAnalytics/pull/74">integrating an AOP-like DSL within ARAnalytics</a>
that would allow you to define all of your analytics in one spot.</p>

<p>The interface would be simple. When providing your API keys to the various
backend services you&#8217;d like to use with ARAnalytics, you&#8217;d also provide a
dictionary specifying the classes you&#8217;d like us to &#8220;hook into&#8221;. Whenever a
selector from an instance of the given class was invoked, we&#8217;d execute the
analytics event specified in the dictionary.</p>

<p>Since Objective-C has a dynamic runtime, we could have swizzled the instance
methods on the classes you specified in the dictionary. This gets a little
tricky and represents a lot of work for us. We could directly swizzle the
instance methods on the classes in question, but wrapping parameters of variable
types and in various numbers becomes a chore. If we didn&#8217;t get it done
perfectly, we&#8217;d risk introducing bugs into the entire application.</p>

<p>I wrote a proof-of-concept of analytics using AOP with <a href="http://reactivecocoa.io">ReactiveCocoa</a>.
It worked, but was a little hacky since it involved the swizzling of <code>alloc</code>.
ReactiveCocoa is also a large framework to be included just for the sake of
analytics. Additionally, its interface exposed ReactiveCocoa&#8217;s <code>RACTuple</code> class,
which smells like a leaky abstraction.</p>

<h2>What could we do?</h2>

<p>Well, about the same time, Pete Steinberger open sourced a new framework just
for AOP called <a href="https://github.com/steipete/Aspects">Aspects</a>. Pete did all the
difficult work of swizzling methods with variable parameter lists, including
wrapping primitive parameters in values.</p>

<p>Pete and I worked together to get Aspects working with ARAnalytics, removing our
dependency on ReactiveCocoa.</p>

<h2>How to Use it</h2>

<p>Using ARAnalytics with the new DSL is super-easy. Just add either <code>ARAnalytics</code>
or <code>ARAnalytics/DSL</code> to your podfile, specifying a version of at least 2.6. Run
<code>pod install</code> and you&#8217;re ready to get started.</p>

<p>Since all of your analytics are going to be specified in one spot, and that spot
is going to get rather large, I&#8217;d recommend creating an Objective-C category on
your app delegate to set up all of your analytics. Then you can call this
<code>setupAnalytics</code> method when your app launches.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;ARAppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ARAppDelegate</span> <span class="nl">(Analytics)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupAnalytics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;ARAnalytics/DSL.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ARAppDelegate</span> <span class="nl">(Analytics)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupAnalytics</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">setupWithAnalytics</span><span class="o">:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>      <span class="cm">/* keys */</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">configuration</span><span class="o">:</span>
</span><span class='line'>    <span class="err">@</span><span class="p">{</span>
</span><span class='line'>      <span class="nl">ARAnalyticsTrackedEvents:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>          <span class="err">@</span><span class="p">{</span>
</span><span class='line'>              <span class="nl">ARAnalyticsClass:</span> <span class="n">MyViewController</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>              <span class="nl">ARAnalyticsDetails:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>                  <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                      <span class="nl">ARAnalyticsEventName:</span> <span class="s">@&quot;hearted&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nl">ARAnalyticsSelectorName:</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">buttonWasPressed</span><span class="o">:</span><span class="p">)),</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our <code>buttonWasPressed:</code> method is <em>very</em> straightforward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">buttonWasPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">hearted</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view controller is now <em>only</em> responsible for what it should be responsible
for: mediating interactions between the view and the model. Awesome! Even
cooler, we can provide fine-grain control over which analytics events are
invoked and with what properties they are sent with. Let&#8217;s take a look.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">setupWithAnalytics</span><span class="o">:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* keys */</span>
</span><span class='line'><span class="p">}</span> <span class="n">configuration</span><span class="o">:</span>
</span><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="nl">ARAnalyticsTrackedEvents:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>      <span class="err">@</span><span class="p">{</span>
</span><span class='line'>          <span class="nl">ARAnalyticsClass:</span> <span class="n">MyViewController</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">ARAnalyticsDetails:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>              <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsEventName:</span> <span class="s">@&quot;hearted&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsSelectorName:</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">buttonWasPressed</span><span class="o">:</span><span class="p">)),</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsEventProperties:</span> <span class="o">^</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">(</span><span class="n">MyViewController</span> <span class="o">*</span><span class="n">controller</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">UIButton</span> <span class="o">*</span><span class="n">button</span> <span class="o">=</span> <span class="n">parameters</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">NSString</span> <span class="o">*</span><span class="n">buttonTitle</span> <span class="o">=</span> <span class="p">[</span><span class="n">button</span> <span class="n">titleForState</span><span class="o">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>                        <span class="k">return</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                            <span class="s">@&quot;view_title&quot;</span> <span class="o">:</span> <span class="n">controller</span><span class="p">.</span><span class="n">title</span> <span class="o">?:</span> <span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="s">@&quot;button_title&quot;</span> <span class="o">:</span> <span class="n">buttonTitle</span> <span class="o">?:</span> <span class="s">@&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="p">};</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsShouldFire:</span> <span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">MyViewController</span> <span class="o">*</span><span class="n">controller</span><span class="p">,</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">return</span> <span class="cm">/* selective disable firing of analytics */</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you see that even though you&#8217;re defining your analytics once, at application
startup, you&#8217;re still able to provide dynamic, per-instance behaviour and event
properties.</p>

<p>Finally, we&#8217;ve also written support for page views. In a few lines, you can
have every view controller track its page view with ARAnalytics.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">ARAnalytics</span> <span class="n">setupWithAnalytics</span><span class="o">:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* keys */</span>
</span><span class='line'><span class="p">}</span> <span class="n">configuration</span><span class="o">:</span>
</span><span class='line'><span class="err">@</span><span class="p">{</span>
</span><span class='line'>  <span class="nl">ARAnalyticsTrackedScreens:</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>      <span class="err">@</span><span class="p">{</span>
</span><span class='line'>          <span class="nl">ARAnalyticsClass:</span> <span class="n">UIViewController</span><span class="p">.</span><span class="n">class</span><span class="p">,</span>
</span><span class='line'>          <span class="nl">ARAnalyticsDetails:</span> <span class="err">@</span><span class="p">[</span> <span class="c1">// default selector on iOS is viewDidAppear:</span>
</span><span class='line'>              <span class="err">@</span><span class="p">{</span>
</span><span class='line'>                  <span class="nl">ARAnalyticsPageNameKeyPath:</span> <span class="s">@&quot;title&quot;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will track a page view with the title the same as the view
controller&#8217;s <code>title</code> property, but just like with events you can provide
fine-grained handling.</p>

<h2>Some Limitations</h2>

<p>There is a <a href="https://github.com/steipete/Aspects/issues/11">limitation</a> on
Aspects that wasn&#8217;t fully understood until we used the new AOP approach to
analytics in the Artsy app. Selectors can only be &#8220;hooked into&#8221; once per class
hierarchy. That  means that you cannot create a tracked events for two
difference view controllers, both on the <code>viewWillAppear:</code> selector. This is a
temporary limitation while the Aspects library is being worked on. In the mean
time, you are free to use the <a href="https://github.com/orta/ARAnalytics/tree/ashfurrow-temporary-dsl-fix">original implementation</a>
with ReactiveCocoa, which doesn&#8217;t have this limitation and which we are using
currently.</p>

<h2>What we Learnt</h2>

<p>AOP is a really cool paradigm that can reduce tight coupling in your code and
increase your overall level of cohesion. Its applications extend beyond just
analytics â any time you have a behaviour that&#8217;s being exhibited in several
abstractions in your code, you should consider if using AOP to replace that
behaviour might make for cleaner code and more cohesive abstractions.</p>

<p>Finally, I got to make my first significant contribution to open source at
Artsy. It was awesome to be able to collaborate with Pete and Orta on this
project, as well as receive feedback from developers who are already using
ARAnalytics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retain scroll position in infinite scroll]]></title>
    <link href="http://artsy.github.io/blog/2014/07/09/retain-scroll-position-in-infinite-scroll/"/>
    <updated>2014-07-09T17:29:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/07/09/retain-scroll-position-in-infinite-scroll</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/4b7e6aefa00b96ba2804b235aaaa811bbb893c4e/687474703a2f2f7777772e6578706c61696e786b63642e636f6d2f77696b692f696d616765732f352f35362f696e66696e6974655f7363726f6c6c696e672e706e67" alt="Maybe we should give up on the whole idea of a 'back' button. 'Show me that thing I was looking at a moment ago' might just be too complicated an idea for the modern web." /></p>

<p>Although <a href="https://news.ycombinator.com/item?id=7314965">some find infinite scroll to be a contentious topic</a> at Artsy we&#8217;ve found it to be a useful element in many portions of our site such as <a href="https://artsy.net/browse/artworks?medium=prints&amp;price_range=-1%3A1000">filtering</a>. However, we&#8217;ve run into a common and painful usability issue with infinite scroll. That is clicking on an item redirects to the next page, losing your scroll position, and losing your place when going back. To solve this we have come up with a clever little solution using an iframe.</p>

<!-- more -->


<p>We&#8217;re pleased to announce we&#8217;ve open sourced this solution into <a href="https://github.com/artsy/scroll-frame">scrollFrame</a>.</p>

<p>scrollFrame borrows from sites like Pinterest that avoid this problem by opening the next page in a <a href="http://en.wikipedia.org/wiki/Modal_window">modal window</a>. Only instead of having to build your entire page client-side, scrollFrame will intercept your click and open the next page in an iframe that sits on top of your current page and covers your viewport (acting as a sort of modal that doesn&#8217;t look like a modal). scrollFrame will then hook into the <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">HTML5 history API</a> to remove the iframe modal on back button and keep your URL up to date. <a href="https://artsy.net/browse">See it in action on our browse page!</a></p>

<p>scrollFrame only solves this specific problem with infinite scroll but we&#8217;ve gotten a lot of mileage out of it and we hope you will too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artsy's first closed source Pod]]></title>
    <link href="http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod/"/>
    <updated>2014-06-20T17:53:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/06/20/artsys-first-closed-source-pod</id>
    <content type="html"><![CDATA[<p>When I joined Artsy, <a href="http://code.dblock.org">dB</a> pitched me this idea: <em>Open source as default.</em></p>

<p>I took this to heart. I genuinely believe the idea behind the philosophy. It&#8217;s cool that our real product isn&#8217;t our implementations on the web or native but the data which powers it - <a href="https://artsy.net/theartgenomeproject">the Art Genome Project</a>. Similarly, I spend a bunch of time <a href="https://github.com/AshFurrow/ARCollectionViewMasonryLayout">on</a> <a href="https://github.com/dblock/ARASCIISwizzle">open</a> <a href="https://github.com/dblock/ios-snapshot-test-case-expecta">sourcing</a> <a href="https://github.com/dblock/ARTiledImageView">solid</a> <a href="https://github.com/dstnbrkr/DRBOperationTree">abstractions</a> <a href="https://github.com/orta/ORSimulatorKeyboardAccessor">from</a> <a href="https://github.com/orta/ORStackView">our</a> <a href="https://github.com/orta/ARAnalytics">apps</a>, always taking the opinion if something is used in more than one place, it should be open sourced.</p>

<p>This week I pushed some libraries that were a bit different, read on to find out why.</p>

<!-- more -->


<h2>The problem</h2>

<p>I was modernizing a section of <a href="http://orta.github.io/#folio-header-unit">Folio</a> that hasn&#8217;t changed in 2 years to use custom UILabel subclasses consistent with <a href="https://iphone.artsy.net">the Artsy iOS app</a> and realized I was copying and pasting a large amount of code from one app to the other. This got me thinking about ways to keep this code in one place, as we might start another project which needs these same styles soon.</p>

<h2>The solution</h2>

<p>I didn&#8217;t want to put it on the public CocoaPods Spec Repo, because it&#8217;s not very relevant to the larger community, but in keeping with our philosophy of &#8220;open source by default,&#8221; I definitely wanted to publish it as an example for others. The most elegant answer was to create our own <a href="https://github.com/artsy/specs">public Specs Repo</a>, which serves as a good reference when people want to know what a private specs repo looks like.</p>

<p>Like anyone who has tried to modularize a pretty large code-base, it turns out a lot of things were connected together. I couldn&#8217;t just build my <a href="http://github.com/Artsy/Artsy-UILabels">Artsy+UILabels</a> repo and put everything in there. Instead I had to also build Artsy+UIFonts and <a href="http://github.com/Artsy/Artsy-UIColors">Artsy+UIColors</a>.</p>

<p>One of the good things about having to build three libraries is that I became very familiar with <code>pod lib create</code>. This is a command for building the scaffolding around a CocoaPod, making it much easier to create something fast. We had been holding off doing a <a href="https://github.com/CocoaPods/pod-template/pull/33">big update</a> to the command because no-one knew what WWDC would bring. Now we know, so I&#8217;ve worked on a new version of the command that programmatically manipulates an example project via <a href="https://github.com/CocoaPods/Xcodeproj">xcodeproj</a>. I&#8217;ve used it in creating all of these libraries. Expect to see it on the CocoaPods blog soon.</p>

<h2>Caveat</h2>

<p>I built three libraries, but one of them is unique. I modelled Artsy+UIFonts from <a href="http://kylefuller.co.uk">Kyle Fuller</a>&#8217;s <a href="https://github.com/kylef/OpenSans-pod">OpenSans-pod</a>, where the CocoaPod has the font resources and installing it moves them into your project. This is great for a free or open-source font, but would break commercial font licenses. For that reason, we don&#8217;t have the ability to open source that project. Thus Artsy Mobile&#8217;s first closed-source library.</p>

<p>This is a great example of how you can build a private specs repo, whilst the public-private aspect is not applicable to most companies. I find it to be a nice halfway house between open source as default, and keeping something internal. For more info on setting up your own private specs repos, <a href="http://guides.cocoapods.org/making/private-cocoapods.html">check the guides</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building the Xcode Plugin Snapshots]]></title>
    <link href="http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/"/>
    <updated>2014-06-17T10:50:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots</id>
    <content type="html"><![CDATA[<p>I&#8217;m the kind of guy who thinks better tooling means better outcomes. But when good tooling isn&#8217;t available, it&#8217;s time to build it yourself. It&#8217;s this attitude that lead to my work on <a href="http://cocoadocs.org">CocoaDocs.org</a>, and then to <a href="http://cocoapods.org">CocoaPods.org</a> &amp; its documentation.</p>

<p>We&#8217;ve been trying to apply this to testing, and in order to pull this off I&#8217;ve had to extend Xcode to show off the results of failing tests in a more visual way. To that end, I&#8217;ve extended Xcode to show the results of failing <a href="https://github.com/facebook/ios-snapshot-test-case">view tests</a> in a more visual way by building <a href="https://github.com/orta/snapshots">Snapshots for Xcode</a>.  Let&#8217;s go through the process of building an Xcode plugin so you can do this too. Screw stability.</p>

<!-- more -->


<h2>Getting started</h2>

<p>Lets start of with some Xcode inception. The nicest way to start working on Xcode plugins is to install <a href="http://alcatraz.io">Alcatraz</a> the Xcode plugin package manager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -fsSL https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh</span></code></pre></td></tr></table></div></figure>


<p>From Alcatraz you should have <a href="https://github.com/edwardaux/XcodeExplorer">XcodeExplorer</a> installed. This lets you dig through internal notifications and the Xcode view heriarchy for debugging. Then you&#8217;ll want <a href="http://delisa.me">Delisa Mason</a>&#8217;s <a href="https://github.com/kattrali/Xcode5-Plugin-Template">Xcode 5 Plugin</a> template which also comes from Alcatraz. Now you can create a new project and pick <em>&#8220;Xcode 5 Plugin&#8221;</em>. This will do a bunch of the boring work around getting set up on a project, though it misses one bit that to me is essential, setting the Scheme Target. Once setup go to the Scheme editor and make it open Xcode as the target.</p>

<p><img src="http://artsy.github.io/images/2014-06-17-building-the-xcode-plugin-snapshots/scheme.png" alt="Go set you target dangit" /></p>

<p>This means that when you do <code>cmd + r</code> on your project it will open a new instance of Xcode with your plugin installed, making the dev cycle for a plugin as simple as a normal OS X app. From here I can&#8217;t tell you how to build your plugin. It&#8217;s just normal development, however I can offer some general advice:</p>

<ul>
<li>When you see a class you don&#8217;t know, google it, chances are Luis Solano has you covered with <a href="https://github.com/luisobo/Xcode-RuntimeHeaders">Xcode-RuntimeHeaders</a>.</li>
<li>Use id with fake class interfaces to get around having the headers for Xcode&#8217;s classes.</li>
<li>Avoid 3rd party dependencies as much as possible as all plugin classes are in the same runtime.</li>
<li>A lot of work is done in notifications, so it&#8217;s easy to hook in to state changes.</li>
<li>Swizzle as little as possible</li>
<li>Wrap code you&#8217;re not 100% on with <code>@try {} @catch {}</code> once it&#8217;s working to crash elegantly</li>
<li>Look at the source code of other plugins</li>
<li>Read <a href="https://github.com/kattrali/Xcode5-Plugin-Template#notes">the notes</a> on the Xcode5 Plugin Template</li>
</ul>


<h2>Releasing</h2>

<p>Next up you want to get it on Alcatraz, this is just a pull request to the <a href="https://github.com/supermarin/alcatraz-packages">alcatraz-packages repo</a>, it&#8217;s like the old days of CocoaPods! Then you have a plugin, and people will always be using the master HEAD version of your plugin, so be wary around putting unstable code on that branch.</p>

<p>It&#8217;s easy to forget that if you build apps you have all the tools you need to improve your workflow, one improvement that saves you an hour today could save thousands of human-hours once it&#8217;s out in the community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Core Data Migrations]]></title>
    <link href="http://artsy.github.io/blog/2014/06/11/testing-core-data-migrations/"/>
    <updated>2014-06-11T10:50:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/06/11/testing-core-data-migrations</id>
    <content type="html"><![CDATA[<p>The first time I released a patch release for <a href="http://orta.github.io/#folio-header-unit">Artsy Folio</a> it crashed instantly, on every install. Turns out I didn&#8217;t understand Core Data migrations, now a few years on I grok it better but I&#8217;ve still lived with the memories of that dark dark day. Because of this I&#8217;ve had an informal rule of testing migrations with all the old build of Folio <a href="http://artsy.github.io/blog/2013/03/29/musical-chairs/">using chairs</a> the day before submitting to the app store.</p>

<p>This time round, I&#8217;ve made vast changes to the Core Data models but skipped the manual work. Here&#8217;s how:</p>

<!-- more -->


<p>Context: Folio is a big Core Data app, that now has hundreds of <a href="https://speakerdeck.com/orta/getting-eigen-out?slide=40">tests</a> that I&#8217;ve added in the past 6 month, tests that cover everything from <a href="https://speakerdeck.com/orta/getting-eigen-out?slide=40">the views</a> to simple model checks. It was originally built with a CoreDataManager singleton that contains a reference to a per-thread main managed object context. As I started to apply tests to the app I needed to start creating in-memory managed object contexts for <a href="http://www.bignerdranch.com/blog/dependency-injection-ios/">dependency injection</a>. Making my class (roughly) end up like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">CoreDataManager</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nf">mainManagedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nf">stubbedManagedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a simplified implementation of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">BOOL</span> <span class="n">ARRunningUnitTests</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedObjectModel</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">mainManagedObjectContext</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">CoreDataManager</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">==</span> <span class="p">[</span><span class="n">CoreDataManager</span> <span class="n">class</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">XCInjectBundle</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">environment</span><span class="p">]</span> <span class="n">objectForKey</span><span class="o">:</span><span class="s">@&quot;XCInjectBundle&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">ARRunningUnitTests</span> <span class="o">=</span> <span class="p">[</span><span class="n">XCInjectBundle</span> <span class="n">hasSuffix</span><span class="o">:</span><span class="s">@&quot;.xctest&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span><span class="nf">managedObjectModel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">modelURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">URLForResource</span><span class="o">:</span><span class="s">@&quot;ArtsyPartner&quot;</span> <span class="n">withExtension</span><span class="o">:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithContentsOfURL</span><span class="o">:</span><span class="n">modelURL</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="p">)</span><span class="nf">persistentStoreCoordinator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">persistentStoreCoordinator</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="k">return</span> <span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="p">[</span><span class="n">ARFileUtils</span> <span class="n">coreDataStorePath</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span> <span class="n">NSMigratePersistentStoresAutomaticallyOption</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="nb">YES</span><span class="p">),</span> <span class="n">NSInferMappingModelAutomaticallyOption</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="nb">YES</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">model</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataManager</span> <span class="n">managedObjectModel</span><span class="p">];</span>
</span><span class='line'>    <span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithManagedObjectModel</span><span class="o">:</span><span class="n">model</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">persistentStoreCoordinator</span> <span class="n">addPersistentStoreWithType</span><span class="o">:</span><span class="n">NSSQLiteStoreType</span> <span class="n">configuration</span><span class="o">:</span><span class="nb">nil</span> <span class="n">URL</span><span class="o">:</span><span class="n">storeURL</span> <span class="n">options</span><span class="o">:</span><span class="n">options</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nf">mainManagedObjectContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ARRunningUnitTests</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">@throw</span> <span class="p">[</span><span class="n">NSException</span> <span class="n">exceptionWithName</span><span class="o">:</span><span class="s">@&quot;ARCoreDataError&quot;</span> <span class="n">reason</span><span class="o">:</span><span class="s">@&quot;Nope - you should be using a stubbed context somewhere.&quot;</span> <span class="n">userInfo</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mainManagedObjectContext</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mainManagedObjectContext</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">newManagedObjectContext</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mainManagedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nf">newManagedObjectContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="p">[</span><span class="n">ARFileUtils</span> <span class="n">coreDataStorePath</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span> <span class="n">NSMigratePersistentStoresAutomaticallyOption</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="nb">YES</span><span class="p">),</span> <span class="n">NSInferMappingModelAutomaticallyOption</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="nb">YES</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">model</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataManager</span> <span class="n">managedObjectModel</span><span class="p">];</span>
</span><span class='line'>    <span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithManagedObjectModel</span><span class="o">:</span><span class="n">model</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nf">stubbedManagedObjectContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span> <span class="n">NSMigratePersistentStoresAutomaticallyOption</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="nb">YES</span><span class="p">),</span> <span class="n">NSInferMappingModelAutomaticallyOption</span><span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="nb">YES</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">model</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataManager</span> <span class="n">managedObjectModel</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithManagedObjectModel</span><span class="o">:</span><span class="n">model</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">persistentStoreCoordinator</span> <span class="n">addPersistentStoreWithType</span><span class="o">:</span><span class="n">NSInMemoryStoreType</span> <span class="n">configuration</span><span class="o">:</span><span class="nb">nil</span> <span class="n">URL</span><span class="o">:</span><span class="nb">nil</span> <span class="n">options</span><span class="o">:</span><span class="n">options</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">context</span><span class="p">.</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This meant it was very easy to quickly make tests that look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;shows sync info when there are no CMS albums&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataManager</span> <span class="n">stubbedManagedObjectContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ARAddAlbumThatIsEditableInContext</span><span class="p">(</span><span class="nb">YES</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ARAddAlbumThatIsEditableInContext</span><span class="p">(</span><span class="nb">NO</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ARAddToAlbumViewController</span> <span class="o">*</span><span class="n">controller</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ARAddToAlbumViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithManagedObjectContext</span><span class="o">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="n">CGRect</span><span class="p">){</span> <span class="n">CGPointZero</span><span class="p">,</span> <span class="p">[</span><span class="n">controller</span> <span class="n">preferredContentSize</span><span class="p">]};</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">controller</span><span class="p">.</span><span class="n">view</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">haveValidSnapshot</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This made it very cheap conceptually to make a new in-memory context and to be sure that the changes wouldn&#8217;t affect the development data store. However, once I had this framework in place it became a pretty simple jump to taking the existing sqlite files that I already had around in my <a href="http://artsy.github.io/blog/2013/03/29/musical-chairs/">chairs folder</a> and make to force a migration from that build to the latest managed object model. Here&#8217;s the test suite in full:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ARAppDataMigrations.m</span>
</span><span class='line'><span class="c1">//  Artsy Folio</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Orta on 12/05/2014.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014 http://artsy.net. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="nf">ARContextWithVersionString</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecBegin</span><span class="p">(</span><span class="n">ARAppDataMigrations</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">__block</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;migrates from 1.3&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">ARContextWithVersionString</span><span class="p">(</span><span class="s">@&quot;1.3&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">toNot</span><span class="p">.</span><span class="n">raise</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">beTruthy</span><span class="p">();</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">([</span><span class="n">Artwork</span> <span class="n">countInContext</span><span class="o">:</span><span class="n">context</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">]).</span><span class="n">to</span><span class="p">.</span><span class="n">beGreaterThan</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;migrates from  1.3.5&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">ARContextWithVersionString</span><span class="p">(</span><span class="s">@&quot;1.3.5&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">toNot</span><span class="p">.</span><span class="n">raise</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">beTruthy</span><span class="p">();</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">([</span><span class="n">Artwork</span> <span class="n">countInContext</span><span class="o">:</span><span class="n">context</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">]).</span><span class="n">to</span><span class="p">.</span><span class="n">beGreaterThan</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;migrates from  1.4&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">ARContextWithVersionString</span><span class="p">(</span><span class="s">@&quot;1.4&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">toNot</span><span class="p">.</span><span class="n">raise</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">beTruthy</span><span class="p">();</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">([</span><span class="n">Artwork</span> <span class="n">countInContext</span><span class="o">:</span><span class="n">context</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">]).</span><span class="n">to</span><span class="p">.</span><span class="n">beGreaterThan</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">it</span><span class="p">(</span><span class="s">@&quot;migrates from  1.6&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">ARContextWithVersionString</span><span class="p">(</span><span class="s">@&quot;1.4&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">toNot</span><span class="p">.</span><span class="n">raise</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">beTruthy</span><span class="p">();</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">([</span><span class="n">Artwork</span> <span class="n">countInContext</span><span class="o">:</span><span class="n">context</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">]).</span><span class="n">to</span><span class="p">.</span><span class="n">beGreaterThan</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecEnd</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="nf">ARContextWithVersionString</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Allow it to migrate</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>        <span class="nl">NSMigratePersistentStoresAutomaticallyOption:</span> <span class="err">@</span><span class="nb">YES</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">NSInferMappingModelAutomaticallyOption:</span> <span class="nb">@YES</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Open up the the _current_ managed object model</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">model</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataManager</span> <span class="n">managedObjectModel</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithManagedObjectModel</span><span class="o">:</span><span class="n">model</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get an older Core Data file from fixtures</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">storeName</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="s">@&quot;ArtsyPartner_%@&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">bundleForClass</span><span class="o">:</span><span class="n">ARAppDataMigrationsSpec</span><span class="p">.</span><span class="n">class</span><span class="p">]</span> <span class="n">URLForResource</span><span class="o">:</span><span class="n">storeName</span> <span class="n">withExtension</span><span class="o">:</span><span class="s">@&quot;sqlite&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the persistent store to be the fixture data</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">persistentStoreCoordinator</span> <span class="n">addPersistentStoreWithType</span><span class="o">:</span><span class="n">NSSQLiteStoreType</span> <span class="n">configuration</span><span class="o">:</span><span class="nb">nil</span> <span class="n">URL</span><span class="o">:</span><span class="n">storeURL</span> <span class="n">options</span><span class="o">:</span><span class="n">options</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error creating persistant store: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class='line'>        <span class="k">@throw</span> <span class="s">@&quot;Bad store&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create a stubbed context, check give it the old data, and it will update itself</span>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">context</span><span class="p">.</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing too surprising, but I think this is important that these tests are the slowest tests in the app, at a whopping 0.191 seconds. I&#8217;m very willing to trade a fraction of a second on every test run to know that I&#8217;m not breaking app migrations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous integration for service-oriented architectures]]></title>
    <link href="http://artsy.github.io/blog/2014/05/12/continuous-integration-for-service-oriented-architectures/"/>
    <updated>2014-05-12T10:50:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/05/12/continuous-integration-for-service-oriented-architectures</id>
    <content type="html"><![CDATA[<p>Whatever you have against monolithic architectures, at least they&#8217;re easy to test. And when those tests succeed, you can be reasonably confident the live app will work the same way.</p>

<p>Artsy began as one such monolithic app, but we&#8217;ve been refactoring into an ecosystem of related APIs and sites. Today, when you search for <a href="https://artsy.net/gene/cultural-commentary">&#8220;cultural commentary&#8221;</a> or visit <a href="https://artsy.net/artist/robert-longo">Robert Longo</a> on <a href="https://artsy.net">artsy.net</a>, the page is rendered by a web app, sources data from an API, retrieves recommendations from a separate service, tracks trends in another, and records analytics in yet another.</p>

<p>This was a boost for developer productivity and scaling, but eviscerated the value of our tests. We repeatedly encountered bugs that were failings of <em>the interaction between codebases</em> rather than failings of individual ones. Test libraries and tools typically concern themselves with one isolated app. When you have services that consume services that consume services, those isolated tests (with their stubs of everything else) don&#8217;t necessarily reflect production&#8217;s reality.</p>

<p>So how should we develop our small, focused apps (or <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">service-oriented architecture</a>, or <a href="http://martinfowler.com/articles/microservices.html">microservices</a>&#8230;) with confidence? We set out to build a dedicated acceptance test suite that would run tests across multiple services, configuring and integrating them in a way that closely matches the production environment.</p>

<!-- more -->


<h2>The code</h2>

<p>We&#8217;ll take the simplest example possible of 2 related applications: a trivial Ruby API serving a Node.js-based web app. (You can also go directly to <a href="https://github.com/joeyAghion/multiapp_example-tests">the source</a>.)</p>

<p><a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">Recent</a> <a href="http://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html">debates</a> <a href="https://news.ycombinator.com/item?id=7659251">aside</a>, I like to start with a test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;home&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;welcomes visitor&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Browse products&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re using the popular [and familiar] <a href="https://github.com/jnicklas/capybara">Capybara</a> with <a href="https://relishapp.com/rspec">RSpec</a> and <a href="http://docs.seleniumhq.org/">Selenium</a>. Naturally, our test fails right away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rspec
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>     Failure/Error: visit <span class="s2">&quot;/&quot;</span>
</span><span class='line'>     Selenium::WebDriver::Error::UnknownError:
</span><span class='line'>       Target URL / is not well-formed.
</span></code></pre></td></tr></table></div></figure>


<p>There are a few steps to getting our projects installed and running as part of the test suite. First, we&#8217;ll add git submodules in the <code>/api</code> and <code>/web</code> subdirectories that <a href="http://stackoverflow.com/questions/9189575/git-submodule-tracking-latest">track the master branch</a> of each project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git submodule add -b master git@github.com:joeyAghion/multiapp_example-api.git api
</span><span class='line'>git submodule add -b master git@github.com:joeyAghion/multiapp_example-web.git web
</span></code></pre></td></tr></table></div></figure>


<p>Next, create Rake tasks to install prerequisites for each project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Rakefile</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;childprocess&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:spec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:ci</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;checkout&#39;</span><span class="p">,</span> <span class="s1">&#39;install&#39;</span><span class="p">,</span> <span class="s1">&#39;spec&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:checkout</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sh</span> <span class="sx">%{git submodule update --remote --init}</span> <span class="k">do</span> <span class="o">|</span><span class="n">ok</span><span class="p">,</span> <span class="n">res</span><span class="o">|</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Submodule update failed with status </span><span class="si">#{</span><span class="n">res</span><span class="o">.</span><span class="n">exitstatus</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="n">ok</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:install</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;api:install&#39;</span><span class="p">,</span> <span class="s1">&#39;web:install&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:install</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">proc</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;install&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./api&#39;</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">wait</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;bundle install exited with status </span><span class="si">#{</span><span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:install</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">proc</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;npm&#39;</span><span class="p">,</span> <span class="s1">&#39;install&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./web&#39;</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">wait</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;npm install existed with status </span><span class="si">#{</span><span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new <code>checkout</code> and <code>install</code> tasks make sure we have the latest code and all prerequisites installed. Note how we use <code>Bundler.with_clean_env</code> to isolate the API (which has its own Gemfile and bundler environment) from the test suite.</p>

<p>Now that the API and web apps are set up, we&#8217;ll use RSpec&#8217;s <code>before(:suite)</code> and <code>after(:suite)</code> hooks to start and stop them around each test run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/spec_helper.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;childprocess&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">API_PORT</span> <span class="o">=</span> <span class="mi">7000</span>
</span><span class='line'><span class="no">WEB_PORT</span> <span class="o">=</span> <span class="mi">7001</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">run_server</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:</span><span class="si">#{</span><span class="no">WEB_PORT</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">start_api</span>
</span><span class='line'>    <span class="n">start_web</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">stop_api</span>
</span><span class='line'>    <span class="n">stop_web</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">start_api</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Starting API...&quot;</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="k">do</span>
</span><span class='line'>    <span class="vg">$api</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;exec&#39;</span><span class="p">,</span> <span class="s1">&#39;ruby&#39;</span><span class="p">,</span> <span class="s1">&#39;app.rb&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./api&#39;</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;PORT&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">API_PORT</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Waiting for API to start listening...&quot;</span>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">API_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$api</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">stop_api</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Stopping API...&quot;</span>
</span><span class='line'>  <span class="vg">$api</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">start_web</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Starting web...&quot;</span>
</span><span class='line'>  <span class="vg">$web</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="s1">&#39;app.js&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./web&#39;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;API_URL&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;PORT&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">WEB_PORT</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Waiting for web to start listening...&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">WEB_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$web</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">stop_web</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Stopping web...&quot;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">listening_on?</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;netstat -an | grep </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2"> | grep LISTEN&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>rake spec</code> now starts up and waits for both apps, runs our test, and&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Starting</span> <span class="no">API</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Waiting</span> <span class="k">for</span> <span class="no">API</span> <span class="n">to</span> <span class="n">start</span> <span class="n">listening</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="no">Starting</span> <span class="n">web</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Waiting</span> <span class="k">for</span> <span class="n">web</span> <span class="n">to</span> <span class="n">start</span> <span class="n">listening</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="n">home</span>
</span><span class='line'>  <span class="n">welcomes</span> <span class="n">visitor</span>
</span><span class='line'><span class="no">Stopping</span> <span class="no">API</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="no">Stopping</span> <span class="n">web</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">4</span><span class="o">.</span><span class="mi">67</span> <span class="n">seconds</span>
</span><span class='line'><span class="mi">1</span> <span class="n">example</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>

<p>Well, sort of. Our test of the home page doesn&#8217;t even depend on both systems. Let&#8217;s try a more meaningful test, listing products from the API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;shop&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;list widgets&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="n">click_link</span> <span class="s2">&quot;Browse products&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Foo Widget&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will it work?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> shop list widgets
</span><span class='line'>     Failure/Error: expect<span class="o">(</span>page<span class="o">)</span>.to have_content<span class="o">(</span><span class="s2">&quot;Foo Widget&quot;</span><span class="o">)</span>
</span><span class='line'>       expected to find text <span class="s2">&quot;Foo Widget&quot;</span> in <span class="s2">&quot;&quot;</span>
</span><span class='line'>     <span class="c"># ./spec/shop_spec.rb:8:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The web app isn&#8217;t authenticated to use the API! This brings up a more general question:</p>

<h2>How to bootstrap test data</h2>

<p>Most testing frameworks offer fixtures or direct access to the database. Because the API runs in a separate process, things are a little more difficult. We opt for 1 of 2 approaches, depending on the context:</p>

<ul>
<li><strong>Insert data directly into the API&#8217;s database.</strong> We tend to do this only as a last resort, because tests would presume knowledge of the API&#8217;s implementation.</li>
<li><strong>Perform test set-up via the API.</strong> Slightly nicer, and closer to real-life clients. (However, the API must be fairly complete.)</li>
</ul>


<p>In practice, we &#8220;cheat&#8221; and use direct database-insertion to initially bootstrap an API client application, then perform further test set-up through the API. You should choose what&#8217;s most convenient.</p>

<p>Our simple example will register the web application as an API client, then pass a key via basic authentication. We&#8217;ll have to modify the <code>start_web</code> helper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">start_web</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Starting web...&quot;</span>
</span><span class='line'>  <span class="vg">$web</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="s1">&#39;app.js&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./web&#39;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>  <span class="vg">$api_base_url</span> <span class="o">=</span> <span class="s2">&quot;http://</span><span class="si">#{</span><span class="n">api_client</span><span class="o">[</span><span class="s1">&#39;key&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">:@localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;API_URL&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vg">$api_base_url</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;PORT&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">WEB_PORT</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Waiting for web to start listening...&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">WEB_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$web</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">api_client</span>
</span><span class='line'>  <span class="vg">$api_client</span> <span class="o">||=</span> <span class="k">begin</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">post_form</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">&quot;http://localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">/api/clients&quot;</span><span class="p">),</span> <span class="p">{})</span>
</span><span class='line'>    <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the test will need to set up the data it expects to find listed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;shop&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;list widgets&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">create_widget</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Foo Widget&#39;</span><span class="p">,</span> <span class="n">price_cents</span><span class="p">:</span> <span class="mi">100_00</span><span class="p">)</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="n">click_link</span> <span class="s2">&quot;Browse products&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Foo Widget&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># spec/spec_helper.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create_widget</span><span class="p">(</span><span class="n">params</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">post_form</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$api_base_url</span><span class="si">}</span><span class="s2">/api/widgets&quot;</span><span class="p">),</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lo and behold, our entire &#8220;suite&#8221; now passes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2 examples, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>This basic structure has accommodated dozens of test scenarios. We&#8217;ve extended it with database- and cache-clearing between tests, and organized helpers into modules under <code>spec/support</code>. The suite is built nightly against the latest versions of our codebases, and has caught a few significant bugs.</p>

<p>A caveat: with so many layers and dependencies involved, there are often spurious failures. We&#8217;ve picked up a few practices that help:</p>

<ul>
<li><a href="http://artsy.github.io/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">Automatic retries</a></li>
<li><a href="http://artsy.github.io/blog/2014/01/30/isolating-spurious-and-nondeterministic-tests/">Quarantine for problematic tests</a></li>
<li><a href="https://github.com/mattheworiordan/capybara-screenshot">Failure screenshots</a></li>
</ul>


<p>You can <a href="https://github.com/joeyAghion/multiapp_example-tests">grab the example code</a>. And make sure to let us know in the comments how <em>you</em> approach testing across applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Notifications and Personalized Emails Efficiently]]></title>
    <link href="http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently/"/>
    <updated>2014-04-24T16:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently</id>
    <content type="html"><![CDATA[<p>We recently launched a new personalized email here at <a href="https://artsy.net">Artsy</a> that features content that a given user might find interesting. The goal of this post is to describe how we built a backend system that efficiently generates these e-mails for all our users. I&#8217;ll talk about the first, naive implementation that had performance problems right away, and how the second implementation (currently in production) solved those issues, and whose behavior at scale is well-defined and understood. I won&#8217;t go into the details of the design and layout of the mail itself and how we render the content - there are several earlier blog posts that deal with those: <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a>, <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a>.</p>

<p><img src="http://artsy.github.io/images/2014-04-24-generating-notifications-and-personalized-emails-efficiently/percy_example.png" alt="Personalized Email Example" /></p>

<!-- more -->


<h3>Deciding What Content to Include</h3>

<p>First, we had to decide what types of personalized content we wanted to feature in our mails. Users can follow artists and galleries, and so this seemed like a great place to start. We&#8217;d like to let you know about new artworks that have been uploaded by artists that you follow, as well as new shows that have been added by galleries you follow, or that are exhibiting artists you follow. Since we have location data for our galleries and our users (accomplished thru an onboarding flow, or thru geo-locating their IP address), we also want to include new shows that are opening near you. Additionally, we have a recommendations engine that recommends artworks to users based on their preferences and activity on the site, and we&#8217;d like to show some of the latest and best of such recommendations.</p>

<h3>Initial Implementation Ideas</h3>

<p>My first thought was to have an observer (really just some <code>after_save</code> callbacks) that will wait for data to get into a state where a user can be validly notified, and in a background task write these notifications to interested users. Here&#8217;s how the base setup of our <code>Notification</code> model looked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Notification</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Timestamps</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:notifiable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:notifications</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s a simple join of the user and the <code>notifiable</code> (the object/action that a user is being notified about).</p>

<p>Then, a specific notification (such as one for published artworks by artists you follow) can inherit from this and look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PublishedArtworkNotification</span> <span class="o">&lt;</span> <span class="no">Notification</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">notify!</span><span class="p">(</span><span class="n">artwork_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_ids</span> <span class="o">=</span> <span class="no">FollowArtist</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">artist</span><span class="p">:</span> <span class="n">artwork</span><span class="o">.</span><span class="n">artist</span><span class="p">)</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="s2">&quot;user_id&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_ids</span><span class="o">.</span><span class="n">each_slice</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">uids</span><span class="o">|</span>
</span><span class='line'>      <span class="no">PublishedArtworkNotification</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="ss">queue</span><span class="p">:</span> <span class="ss">:any</span><span class="p">,</span> <span class="ss">priority</span><span class="p">:</span> <span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">create_for_users</span><span class="p">(</span><span class="n">artwork_id</span><span class="p">,</span> <span class="n">uids</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_for_users</span><span class="p">(</span><span class="n">artwork</span><span class="p">,</span> <span class="n">uids</span><span class="p">)</span>
</span><span class='line'>    <span class="n">uids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">uid</span><span class="o">|</span>
</span><span class='line'>      <span class="no">PublishedArtworkNotification</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">uid</span><span class="p">,</span> <span class="n">notifiable_id</span><span class="p">:</span> <span class="n">artwork_id</span><span class="p">,</span> <span class="n">notifiable_type</span><span class="p">:</span> <span class="s1">&#39;Artwork&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, the <code>after_save</code> hook on an <code>Artwork</code> model is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">delay_notify</span>
</span><span class='line'>  <span class="no">PublishedArtworkNotification</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="ss">queue</span><span class="p">:</span> <span class="ss">:any</span><span class="p">)</span><span class="o">.</span><span class="n">notify!</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">published_changed?</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, when an artwork is published, we run <code>notify!</code> in the background for the respective notification. That method will pull all interested users (via following the artist), and then spawn off more background processes to write the notifications in batches of 100. We batched these writes to avoid any one background process taking too long (an artist such as <a href="https://artsy.net/artist/andy-warhol">Andy Warhol</a> has around twelve thousand followers currently), and also ran them at a lower priority to avoid blocking other jobs in our queue.</p>

<p>The other types of notifications were all implemented similarly (via an observer on the model, and a specific <code>Notification</code> class inheriting from the base class). We also added some other logic into the base <code>Notification</code> class such as some uniqueness constraints, as well as an ability to mark notifications as &#8216;sent&#8217; or &#8216;invalid&#8217;. However, we ran into serious performance/scaling issues fairly quickly, and had to re-implement this scheme.</p>

<h3>Performance Bottlenecks</h3>

<p>All of these records were being written to one collection in <a href="https://www.mongodb.org/">MongoDB</a>, and the size of this collection grew quite rapidly. It&#8217;s size almost immediately dwarfed the size of any of our other collections, and the number of records quickly reached into the tens of millions. This led to problems: writing new notifications started to crawl to a standstill. We had several indices on this collection to aid in querying, and these made the insertion of new notifications very non-performant, and also started to affect overall database performance. Querying against this collection degraded quickly and started to similarly affect database performance. Archiving old records also proved next to impossible. We couldn&#8217;t simply drop the entire collection, but had to prune records. This similarly was totally non-performant and was adversely affecting database and site performance. We needed to come up with a new implementation for <code>Notification</code>, and addressing these issues was essential.</p>

<h3>Resolving Performance Bottlenecks</h3>

<p>So, we decided on a scheme where each day would result in a new <code>Notifications</code> collection (name keyed on the date), named <code>notifications_20140101</code>, <code>notifications_20140102</code>, etc. Each of these collections would have an <code>_id</code> field that corresponds to a user_id, and an <code>events</code> array (or &#8216;stack&#8217; if you will) that records the id&#8217;s of notified objects, as well as the type of notification. An example of a record in that collection is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;_id&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5106b619f56337db300001f8&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;events&quot;</span><span class="err">=&gt;</span><span class="p">[{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533998b1c9dc24c371000041&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5345774cc9dc246d580003d0&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5335af4fa09a67145300028c&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533f1174a09a67298900007b&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;ArtworkPublished&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5334647b139b2165160000d8&quot;</span><span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, here we see all of my notifications for April 22, 2014. On that day, I was notified about 4 shows opening near my location, and one artwork added by an artist I follow. Incidentally, that artwork was a piece by <a href="https://artsy.net/artist/rob-wynne">Rob Wynne</a> entitled <a href="https://artsy.net/artwork/rob-wynne-youre-dreaming">You&#8217;re Dreaming</a>. The show notifications were for NYC-area shows opening at <a href="https://artsy.net/klein-sun-gallery">Klein Sun Gallery</a>, <a href="https://artsy.net/garis-and-hahn">Garis &amp; Hahn</a>, <a href="https://artsy.net/miyako-yoshinaga-gallery">Miyako Yoshinaga Gallery</a> and <a href="https://artsy.net/dodgegallery">DODGEgallery</a>.</p>

<p>A couple of nice things about this implementation is it limits the size of a collection: any one day&#8217;s collection will scale directly with the number of users, which seems reasonable. Our earlier implementation scaled with the product of the number of users and amount of content on Artsy, which is clearly problematic. Also, archiving old notifications is as simple as dropping a particular day&#8217;s collection, which is very performant. However, querying and assembling these notifications is a bit trickier than in the naive implementation, as well as marking which events have already been sent to a user, so as to avoid duplicating any content in between mailings.</p>

<p>Let&#8217;s see how we rewrite the notification generation in this scheme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">NotificationService</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">notify_many!</span><span class="p">(</span><span class="n">user_ids</span><span class="p">,</span> <span class="nb">object_id</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="n">events</span> <span class="o">=</span> <span class="n">events_from</span><span class="p">(</span><span class="nb">object_id</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_ids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user_id</span><span class="o">|</span>
</span><span class='line'>      <span class="n">notify_with_events</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">events</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">notify_with_events</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">events</span><span class="p">)</span>
</span><span class='line'>    <span class="n">collection</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">upsert</span><span class="p">(</span><span class="s1">&#39;$push&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">events</span><span class="p">:</span> <span class="p">{</span> <span class="s1">&#39;$each&#39;</span> <span class="o">=&gt;</span> <span class="n">events</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">events_from</span><span class="p">(</span><span class="n">object_ids</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">Array</span><span class="p">(</span><span class="n">object_ids</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">object_id</span><span class="o">|</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;t&#39;</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;o&#39;</span> <span class="o">=&gt;</span> <span class="nb">object_id</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># collection storing notifications for the given day</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collection</span><span class="p">(</span><span class="n">date</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Mongoid</span><span class="o">.</span><span class="n">default_session</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">safe</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span><span class="o">[</span><span class="n">collection_name</span><span class="p">(</span><span class="n">date</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collection_name</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;notifications_</span><span class="si">#{</span><span class="n">date</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s how the <code>after_save</code> callback looks now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">notify_published</span>
</span><span class='line'>  <span class="no">NotificationService</span><span class="o">.</span><span class="n">notify_many!</span><span class="p">(</span><span class="n">user_ids</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="s1">&#39;ArtworkPublished&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">published_changed?</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s take a look at what&#8217;s going on here. When an artwork is published, we call <code>notify_many!</code> in the <code>NotificationService</code> module. That will determine the correct collection (keyed by the date) using the <code>collection</code> and <code>collection_name</code> helpers. We build our events stack with the <code>events_from</code> helper, and then do an <code>upsert</code> with a <code>$push</code> to either insert or update that user&#8217;s events for that day. Due to the fast performance of this scheme, we also no longer have to batch notification creation. As a sample benchmark, writing this type of notification to our <a href="https://artsy.net/artist/andy-warhol">Warhol</a> followers takes under 15 seconds.</p>

<p>Ok, so we seem to have solved some of our issues: namely writing and archiving notifications is performant, and we understand the behavior of these collections as the number of users and content on the site grows. Now let&#8217;s look at how we can query against this scheme in an efficient manner, and also how we can mark events as &#8216;seen&#8217; to avoid emailing out duplicates.</p>

<h3>Marking Notifications as Flushed and Retrieving Notifications</h3>

<p>We decided to push a <code>flushed</code> event onto the user&#8217;s stack after we send out notifications, and analogously, when we are querying a user&#8217;s notifications, we want to throw away notifications that occur before a <code>flushed</code> event. Here&#8217;s that method, in our <code>NotificationService</code> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Mark all events until this point &quot;seen.&quot; Pushes a {flushed: &lt;id&gt;}</span>
</span><span class='line'><span class="c1"># hash on to events array.</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">flush!</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">since</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">)</span>
</span><span class='line'>  <span class="n">flushed</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;flushed&#39;</span> <span class="o">=&gt;</span> <span class="ss">Moped</span><span class="p">:</span><span class="ss">:BSON</span><span class="o">::</span><span class="no">ObjectId</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">collections_since</span><span class="p">(</span><span class="n">since</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">coll</span><span class="o">|</span>
</span><span class='line'>    <span class="n">coll</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s1">&#39;$push&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">events</span><span class="p">:</span> <span class="n">flushed</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">flushed</span>  <span class="c1"># return &quot;id&quot; of flushed marker, in case useful later</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collections_since</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">date</span><span class="o">.</span><span class="n">.</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="n">collection</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple. We push the appropriate event onto every collection that was under consideration via the <code>collections_since</code> helper. When we send out a personalized email we accumulate the last 7 day&#8217;s worth of activity for you, and so after we generate/send a mail for a user, we can simply say <code>NotificationService.flush!(user)</code>. Here&#8217;s how that day&#8217;s notifications for me looks after the <code>flushed</code> event:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="p">{</span><span class="nt">&quot;_id&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5106b619f56337db300001f8&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;events&quot;</span><span class="err">=&gt;</span><span class="p">[{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5338504e139b21f2a9000362&quot;</span><span class="p">},</span>
</span><span class='line'>              <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;FollowedArtistShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533ddba3a09a6764f60006b6&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533ddba3a09a6764f60006b6&quot;</span><span class="p">},</span>
</span><span class='line'>              <span class="p">{</span><span class="nt">&quot;flushed&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5352b346b504f5f3690002fe&quot;</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the last piece of the puzzle, let&#8217;s look at how we query against this scheme and compile together all notifications that are applicable for a given user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">NotificationService</span>
</span><span class='line'>  <span class="no">NOTIFICATION_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;FollowedArtistShow&#39;</span> <span class="o">=&gt;</span> <span class="no">PartnerShow</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;FollowedPartnerShow&#39;</span> <span class="o">=&gt;</span> <span class="no">PartnerShow</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;NearbyShow&#39;</span> <span class="o">=&gt;</span> <span class="no">PartnerShow</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;ArtworkPublished&#39;</span> <span class="o">=&gt;</span> <span class="no">Artwork</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;ArtworkSuggested&#39;</span> <span class="o">=&gt;</span> <span class="no">Artwork</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Notification</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:type</span><span class="p">,</span> <span class="ss">:object_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">object</span>
</span><span class='line'>      <span class="vi">@object</span> <span class="o">||=</span> <span class="no">NOTIFICATION_TYPES</span><span class="o">[</span><span class="n">type</span><span class="o">].</span><span class="n">find</span><span class="p">(</span><span class="nb">object_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">applicable?</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:notifiable?</span><span class="p">)</span> <span class="o">||</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Return applicable notifications for user since given date.</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">since</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">)</span>
</span><span class='line'>  <span class="n">collections_since</span><span class="p">(</span><span class="n">since</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">coll</span><span class="o">|</span> <span class="n">coll</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">one</span> <span class="p">}</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>    <span class="o">.</span><span class="n">flat_map</span> <span class="p">{</span> <span class="o">|</span><span class="n">doc</span><span class="o">|</span> <span class="n">doc</span><span class="o">[</span><span class="s1">&#39;events&#39;</span><span class="o">].</span><span class="n">slice_before</span> <span class="p">{</span> <span class="o">|</span><span class="n">ev</span><span class="o">|</span> <span class="n">ev</span><span class="o">[</span><span class="s1">&#39;flushed&#39;</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">last</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">ev</span><span class="o">|</span> <span class="n">ev</span><span class="o">[</span><span class="s1">&#39;flushed&#39;</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">ev</span><span class="o">|</span> <span class="no">Notification</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">ev</span><span class="o">[</span><span class="s1">&#39;t&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">ev</span><span class="o">[</span><span class="s1">&#39;o&#39;</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:applicable?</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We introduce a lite-weight <code>Notification</code> class that will load the object, as well as perform an additional check. We use the previously introduced <code>collections_since</code> helper to retrieve all the notification collections under consideration. We query each and build up an array of all events from a user&#8217;s stack. We remove events that occurred prior to a <code>flushed</code> event in a given collection and the <code>flushed</code> events themselves. Then we actually load all the objects and return the ones that are still <code>applicable?</code>. That final <code>applicable?</code> check is to allow us to filter out content at run-time that is no longer valid. For example, if an artwork is published and the correct event is written out to users, but before the user can be notified the artwork is unpublished, this can serve as a run-time check to not include that work. <code>def notifiable?</code> can thus be implemented in the <code>Artwork</code> model like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">notifiable?</span>
</span><span class='line'>  <span class="n">published?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And&#8230;that&#8217;s basically it! Throughout the week as partners are uploading their shows/fair booths/artworks, these records are being opportunistically written to that day&#8217;s notification collection, in a performant and scalable fashion. Then when we want to send you a personalized email, we pull all your appropriate notifications via the <code>get</code> routine in our <code>NotificationService</code>, and primarily using the technique described in <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a> we make sure we cache/memoize all such data. Using the tips in <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a> we can render this content and support various devices/email clients. We parallelize and batch the generation/sending of our e-mails as well. This whole system, from notification generation to actually emailing users, is running successfully and smoothly in production.</p>

<h3>Next Steps</h3>

<p>I think this type of infrastructure can easily be adapted to serve as a feed on a front-end or other client app. An API to serve up these notifications (AKA feed items) can be built and different feed items can then be rendered or aggregated at load-time. Simple client-side polling can even be set up to alert a user if something has happened that interests them <em>while</em> they&#8217;re browsing! I think push notifications and other messaging can be handled by this system as well.</p>

<p>I&#8217;d love to hear any feedback and thoughts, and hopefully you&#8217;ve found this post informative and interesting. Please leave any feedback in the comments and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an English Auction with MongoDB]]></title>
    <link href="http://artsy.github.io/blog/2014/04/17/building-an-english-auction-with-mongodb/"/>
    <updated>2014-04-17T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/04/17/building-an-english-auction-with-mongodb</id>
    <content type="html"><![CDATA[<p>Artsy ran several successful auctions over the past few months. The first, <a href="https://artsy.net/feature/two-x-two">TWO x TWO</a>, raised hundreds of thousands of dollars for amfAR (the AIDS Research foundation), and the Dallas Museum of Art. It was followed by <a href="https://artsy.net/feature/ici-benefit-auction">Independent Curators International</a>, at which Artsy launched on-site auction projection screens, which displayed competing bids coming in online from places around the world, like Oslo and Santa Monica, in realtime. Users could place bids on the website, via the iPhone app or with one of the Artsy representatives in the room carrying an iPad.  All the auction lots sold, and Artsy helped ICI to raise 50% more than its target revenue goal. Other, recent Artsy auctions include <a href="https://artsy.net/feature/public-art-fund-2014-spring-benefit">Public Art Fund</a> and the <a href="https://artsy.net/feature/brooklyn-artists-ball">Brooklyn Artists Ball</a>, benefitting the Brooklyn Museum.</p>

<p><img src="http://artsy.github.io/images/2014-04-17-implementing-bidding-in-an-english-auction-with-mongodb/ici-live-auction.jpg" alt="ICI Auction: Live" /></p>

<p>The domain of auctions is a fascinating one, and includes everything from buying items on eBay to trading livestock and selling investment products on the stock exchange. For those interested in the large spectrum of auctions I highly recommend <a href="http://www.sci.brooklyn.cuny.edu/~parsons/projects/mech-design/publications/bluffers-final.pdf">Auctions and bidding: A guide for computer
scientists</a> by Simon Parsons (CUNY), Juan A. Rodriguez-Aguilar (CSIC) and Mark Klein (MIT).</p>

<p>At Artsy we implemented a classic English auction with, so called, &#8220;book bids&#8221;. I spent a fair amount of time visiting engineering teams that have built internet auctions, most of which were transactional systems where taking a position on an item involved starting a transaction, running an auction round and committing the changes. In contrast, we chose to deliver a simpler, eventually consistent system on top of MongoDB, in which all data is immutable and where some level of serialization occurs within a single background process.</p>

<p>In this post we&#8217;ll go over some data modeling and examine the auction engine implementation details.</p>

<!-- more -->


<h3>Data Modeling</h3>

<p>In the Artsy platform, an <em>Auction</em> is an specialization of a more general concept of a <em>Sale</em>. A sale typically has an opening and a closing date, during which bidding or purchases can occur. We create a relationship between an artwork and a sale, which, in the case of an auction, includes the opening bid amount. We store all money in cents, and assume the currency to be USD, making it easy to extend the system for other currencies in the future.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SaleArtwork</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:opening_bid_cents</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:artwork</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:sale</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:highest_bid</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;Bid&quot;</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Minimum next acceptable bid amount, in cents.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">minimum_next_bid_cents</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">opening_bid_cents</span> <span class="k">if</span> <span class="n">highest_bid</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">opening_bid_cents</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># calculate using a bid incrementing strategy ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A user registers to bid and creates a <em>Bidder</em> record.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidder</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:sale</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:positions</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s1">&#39;BidderPosition&#39;</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:bidder</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&#8217;t just mimic the real world where bidding typically requires registration - the bidder record doesn&#8217;t belong to the user and contains essential data to identify an individual that is placing a bid. It also solves a very peculiar problem where a user decides to delete their account mid-auction. Finally, a bidder could eventually delegate bidding to an agent through this model&#8217;s permissions.</p>

<p>A bidder doesn&#8217;t actually place any bids, but create a <em>Bidder Position</em>, which indicates the highest amount they are willing to pay for a given artwork.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BidderPosition</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:active</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">Boolean</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:max_bid_amount_cents</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:bidder</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s1">&#39;Bidder&#39;</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:positions</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:sale_artwork</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:bids</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:position</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:active</span><span class="p">,</span> <span class="n">where</span><span class="p">(</span><span class="ss">active</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">asc</span><span class="p">(</span><span class="ss">:max_bid_amount_cents</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is called a &#8220;book bid&#8221; - before technology took over the auctions world buyers delegated an agent to bid on their behalf after giving them a maximum amount they were willing to part with. Bidder positions belong to a bidder and to the artwork-to-sale relationship. They cannot be changed - if a user wants to increase his maximum bid, he simply creates a new bidder position.</p>

<h3>Bidding Round</h3>

<p>Every time a bidder position is created, a <em>Bidding Round</em> is queued for the item being bid on. We can parallelize execution of these by artwork, however all bidding rounds for the same artwork are serialized.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EnglishAuction</span>
</span><span class='line'>  <span class="c1"># Run multiple rounds of bidding for the given lot, to rest. Return number of bids generated.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run!</span><span class="p">(</span><span class="n">sale_artwork</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span> <span class="k">unless</span> <span class="n">sale_artwork</span><span class="o">.</span><span class="n">sale</span> <span class="o">&amp;&amp;</span> <span class="n">sale_artwork</span><span class="o">.</span><span class="n">sale</span><span class="o">.</span><span class="n">biddable?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">round</span> <span class="o">=</span> <span class="ss">EnglishAuction</span><span class="p">:</span><span class="ss">:Round</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">sale_artwork</span><span class="p">)</span>
</span><span class='line'>    <span class="n">round</span><span class="o">.</span><span class="n">run!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">round</span><span class="o">.</span><span class="n">bids_generated</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A bidding round iterates over all active bidder positions in ascending order by dollar value, outbids any bidders below the max bid, and places new bids, as necessary. The entire round algorithm is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A bidding round for an English auction.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Round</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:bids_generated</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># @param sale_artwork A relationship between an artwork and a sale.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">sale_artwork</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@sale_artwork</span> <span class="o">=</span> <span class="n">sale_artwork</span>
</span><span class='line'>    <span class="vi">@bids_generated</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Run multiple rounds of bidding, to rest.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run!</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">bids</span> <span class="o">=</span> <span class="n">process_more_bids!</span><span class="p">)</span><span class="o">.</span><span class="n">any?</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bids_generated</span> <span class="o">+=</span> <span class="n">bids</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Run one round of bidding. Return bids.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_more_bids!</span>
</span><span class='line'>    <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">bidder_positions</span><span class="o">.</span><span class="n">active</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">bidder_position</span><span class="o">|</span>
</span><span class='line'>      <span class="n">process_bidder_position!</span><span class="p">(</span><span class="n">bidder_position</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Process a single bid position.</span>
</span><span class='line'>  <span class="c1"># @returns Generated bid, if any.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_bidder_position!</span><span class="p">(</span><span class="n">bidder_position</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ignore if current position is highest</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">bidder_position</span> <span class="o">==</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:position</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ignore if bidder is already highest</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">bidder</span> <span class="o">==</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:position</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:bidder</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># close if below opening bid</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">&lt;</span> <span class="p">(</span><span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">opening_bid_cents</span> <span class="o">||</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bidder_position</span><span class="o">.</span><span class="n">deactivate!</span> <span class="s2">&quot;Bid must be greater than the minimum bid of </span><span class="si">#{</span><span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">opening_bid_cents</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">amount_cents</span> <span class="o">=</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">minimum_next_bid_cents</span> <span class="c1"># opening bid or an increment thereafter</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">&lt;</span> <span class="n">amount_cents</span>
</span><span class='line'>      <span class="n">highest_bid_amount</span> <span class="o">=</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:amount_cents</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># if max is between current and increment (or if it&#39;s at current, but earlier), bid max anyway</span>
</span><span class='line'>      <span class="c1"># this means that a bidder who placed an identical max bid earlier becomes the highest bidder</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">&gt;</span> <span class="n">highest_bid_amount</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">==</span> <span class="n">highest_bid_amount</span> <span class="o">&amp;&amp;</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">amount_cents</span> <span class="o">=</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1"># outbid, next bid must be at least amount_cents</span>
</span><span class='line'>        <span class="n">bidder_position</span><span class="o">.</span><span class="n">update_attributes!</span> <span class="ss">active</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># place a bid</span>
</span><span class='line'>    <span class="n">bidder_position</span><span class="o">.</span><span class="n">bids</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">bid</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">update_attributes!</span> <span class="n">highest_bid</span><span class="p">:</span> <span class="n">bid</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the interesting aspects of this system is what happens when two users create two identical bidder positions - the earlier one wins and the later one is outbid. In a transactional system we could produce an error message to the second bidder before the position is even created.</p>

<h3>Bidder Notifications</h3>

<p>Notifying upon being &#8220;outbid&#8221; is straightforward, because a position only enters that state once, but notifying bidders of when they are the current high bidder or when their bid has been increased is trickier. We don&#8217;t want to generate notifications every time a bid is made (i.e., it&#8217;s the current high). Rather, we want to allow the round to reach a stable state at which there&#8217;s only a single active position and then notify the current high and outbid bidders. This happens after each <code>round.run!</code>.</p>

<h3>Beyond Bidding</h3>

<p>Aside of the bidding implementation we&#8217;ve built a whole software ecosystem around auctions. We developed a backend system to manage these. We put up projection screens at the event that list works being auctioned and flash every time a bid is placed. We register users&#8217; credit cards and collect their money.</p>

<p>The software part, however, is definitely dwarfed by the amount of logistics and people involved in making one of those auctions a success. We&#8217;re only trying to make that a bit more efficient. We&#8217;ll see you at the upcoming BAM Art Auction, SFMOMA Modern Ball or the Whitney Museum Art Party!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Infrastructure]]></title>
    <link href="http://artsy.github.io/blog/2014/04/02/refactoring-infrastructure/"/>
    <updated>2014-04-02T10:32:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/04/02/refactoring-infrastructure</id>
    <content type="html"><![CDATA[<p><a href="http://martinfowler.com/books/refactoring.html">Refactoring</a> usually describes chages to <em>code</em>. Specifically, small changes that bring a codebase closer to the desired state. By making these changes incrementally and without modifying the end-to-end behavior, we avoid risk and the intermediate broken states that usually plague large-scale changes. But refactoring need not be limited to code. It&#8217;s also an effective way to make infrastructure improvements.</p>

<p>Take the most common&#8211;and simplest&#8211;example: database schema changes. Environments that demand constant uptime have long had to chunk schema changes into steps that allow for a graceful transition. In the simple case of replacing a column, this might look like:</p>

<ol>
<li>Add the new column</li>
<li>Redirect code references there from the old column</li>
<li>Migrate data as necessary, and finally</li>
<li>Remove the old column</li>
</ol>


<p>The same sequencing applies to making larger infrastructure changes gracefully. Some recent examples from our own experience:</p>

<!-- more -->


<h2>Splitting databases</h2>

<p>When MongoDB&#8217;s <a href="http://docs.mongodb.org/manual/faq/concurrency/">database-level write-lock</a> started to impact our API performance, we explored switching certain batch insertions to a separate database. We made the transition seamless by first adding a version number to the batch logic. Existing batches would default to &#8220;v1&#8221; treatment and be read from the main database, while new batches would get &#8220;v2&#8221; treatment and be inserted into (and then read from) a secondary database. (See <a href="https://gist.github.com/joeyAghion/9955727">this gist</a> for a more concrete demonstration.) After a few cycles, legacy collections had all been replaced by more recent batches in the new database and could be removed.</p>

<h2>Extracting a web front-end from a monolithic app</h2>

<p>The <a href="https://artsy.net">artsy.net</a> site was recently extracted from our main Rails application into a dedicated Node.js app and a true client of our API. We rolled it out almost page-by-page; we simply configured <a href="http://wiki.nginx.org/Main">Nginx</a> to proxy requests for a whitelist of paths to the new site. That allowed us to start with the simplest of pages and incorporate new ones as they were developed. Nginx supports <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass">sophisticated proxying rules</a>, but our example can be as simple as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location ^~ /about|press {
</span><span class='line'>  proxy_pass http://next.artsy.net;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once the new app was feature-complete, we removed the proxying layer and updated DNS so it would handle all requests.</p>

<h2>New hosting environment</h2>

<p>When we <a href="http://artsy.github.io/blog/2013/08/27/introduction-to-aws-opsworks/">switched hosting providers</a> for our main application, it required changes to <em>many</em> related tools and services (for logs, deploys, background queues, etc.). To mitigate risk, we set up a &#8220;double-deploy&#8221; to the legacy and new environments as soon as the basic elements were in place. The environments ran the same code and shared a data store. First, we targeted the new environment from only a few internal apps. As we surfaced and fixed bugs, we directed more client applications away from the old, eventually winding it down altogether. The process was spread over months, but since each individual change was small and low-risk, we were confident and could adjust course as necessary.</p>

<h2>Full application rewrite</h2>

<p>Occasionally&#8211;but rarely&#8211;it&#8217;s awkward to partially roll out a new system. Maybe it&#8217;s a significant enough re-imagining that it won&#8217;t play nicely with the legacy application (e.g., a clashing UI that&#8217;s difficult to back-port). It&#8217;s <em>still</em> possible to take a refactoring approach. When the new application is minimally viable, new customers can be directed to it. As more customers join and the new application reaches feature parity (and beyond), the user base naturally shifts toward the new and away from the old. Legacy customers can be transitioned when it&#8217;s more convenient.</p>

<p>Trying a refactoring approach over the course of these large infrastructure changes has convinced me of the following lessons:</p>

<p><strong>1. There&#8217;s <em>always</em> a more incremental approach.</strong> Repeat after me.</p>

<p><strong>2. Your culture will benefit.</strong> Just as the tools and vocabulary of code refactoring yield benefits to development workflow, there are cultural benefits to viewing infrastructure as more dynamic and flexible. We&#8217;re able to make more aggressive changes, and with greater confidence in the result. Nothing is sacred, &#8220;fixed,&#8221; or can&#8217;t be undone.</p>

<p><strong>3. Ship sooner.</strong> By exercising the ability to roll out infrastructure changes incrementally, bugs and mistaken assumptions are surfaced earlier.</p>

<p><strong>4. Transitions can be ugly.</strong> There will likely be some embarrassing intermediate stages. Embrace it. As a rule of thumb, it&#8217;s OK to compromise the old system&#8217;s integrity (i.e., <em>hack</em>) to ease the transition as you work toward the new ideal.</p>

<p>The tools for managing infrastructure have been improving steadily (see <a href="http://www.getchef.com/chef/">Chef</a>, <a href="http://www.ansible.com/home">Ansible</a>, <a href="https://www.docker.io/">Docker</a>), making infrastructure changes more lightweight, testable, and repeatable&#8211;closer to code. Refactoring infrastructure is the natural extension of this. From <a href="https://twitter.com/KentBeck">Kent Beck</a>:</p>

<blockquote class="twitter-tweet" lang="en"><p>for each desired change, make the change easy (warning: this may be hard), then make the easy change</p>&mdash; Kent Beck (@KentBeck) <a href="https://twitter.com/KentBeck/statuses/250733358307500032">September 25, 2012</a></blockquote>


<script async src="http://artsy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presenters and Memoization: Moving Logic out of Templates]]></title>
    <link href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/"/>
    <updated>2014-03-18T17:27:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates</id>
    <content type="html"><![CDATA[<p>When dealing with rendering data for an email, one frequently has to make many database calls to assemble the required data. This can be slow, and depending on how you structure the code that is assembling the data vs rendering the data in a template, it&#8217;s very easy to be making repeated calls, which can significantly slow down your process. Additionally, whether you are using <a href="http://haml.info/">Haml</a>, <a href="http://mustache.github.io/">Mustache</a>, <a href="http://jade-lang.com/">Jade</a>, or any other templating language, embedding too much logic in the template can making things hard to maintain (especially if some logic lives in the template and some elsewhere in your domain code). Of course some logic in the template (a conditional: should I render this section?, or loops: render this hash of data) is necessary, but I like to keep as much out of there as possible. It&#8217;s easier to optimize, debug and maintain that logic elsewhere, and also writing complex logic in <a href="https://www.ruby-lang.org">Ruby</a> is much more fun than in a templating language!</p>

<p>In this article I&#8217;ll present what I&#8217;ve been doing to keep my templates relatively logic-free, and how I make sure I don&#8217;t repeat any heavy database calls in assembling my data.</p>

<!-- more -->


<h2>The Setup - Presenters and Memoization</h2>

<p>First, I&#8217;d like to introduce the Presenter pattern, and how this can help clean up your templates. Here are a couple of links about using presenters with <a href="http://rubyonrails.org/">Rails</a> that I&#8217;ve found useful:</p>

<ul>
<li><a href="http://blog.jayfields.com/2007/03/rails-presenter-pattern.html">Jay Fields&#8217; Guide to Presenters</a></li>
<li><a href="http://www.slideshare.net/mdesjardins/presenters-in-rails">Mike Desjardins&#8217; Slideshare Presentation</a></li>
</ul>


<p>Consider the following screenshot of a section of a weekly email that we send our users:</p>

<p><img src="http://artsy.github.io/images/2014-03-18-presenters-and-memoization-moving-logic-out-of-templates/recently_added.png" alt="Example of Recently Added Works" /></p>

<p>This section shows works that have been added that week by artists that you follow. That&#8217;s clearly going to involve some database calls, and potentially heavy ones at that. Now we&#8217;d like to accomplish two things here: we want to make sure that we only make these calls once (no matter what we wind up doing with the data later), and we also would like to make sure that any code or logic that is making these calls and doing any data manipulation is not being done directly in our templates. Keeping this kind of logic out of your template will make it easier to debug, maintain and write.</p>

<p>Let&#8217;s start by creating a Module to hold the various logic required for this email:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeeklyEmailPresenter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so far so good. In our mail template rendering/calling code, we can now say:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@presenter</span> <span class="o">=</span> <span class="no">WeeklyEmailPresenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow us to refer to methods in this class in our mail template. So now let&#8217;s add a method that will query our database and return a list of artists that this user should be notified about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeeklyEmailPresenter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">recently_added_works</span>
</span><span class='line'>    <span class="c1"># Some really heavy database query</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, that was easy. In our HAML template, we can now do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span><span class="k">if</span> <span class="vi">@presenter</span><span class="o">.</span><span class="n">recently_added_works</span> <span class="o">&amp;&amp;</span> <span class="vi">@presenter</span><span class="o">.</span><span class="n">recently_added_works</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>  <span class="nt">%table</span>
</span><span class='line'>    <span class="nt">%tr</span>
</span><span class='line'>      <span class="nt">%td</span>
</span><span class='line'>        <span class="p">-</span><span class="vi">@presenter</span><span class="o">.</span><span class="n">recently_added_works</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artists</span><span class="o">|</span>
</span><span class='line'>          &lt;!-- markup to render each artist with recently added works --&gt;
</span></code></pre></td></tr></table></div></figure>


<p>However, take a look at how many times we&#8217;ve referred to <code>@presenter.recently_added_works</code> - 3 times already! And we&#8217;ll most likely refer to it more elsewhere (perhaps when deriving a subject line, or showing a total count somewhere, etc.). Depending on how you&#8217;ve implemented the method <code>recently_added_works</code>, you may be re-querying the database every time it&#8217;s referred to! Clearly that&#8217;s a lot of wasted resources. So, let&#8217;s look at an easy change that will guarantee we only ever perform the work to assemble this data once. We memoize it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeeklyEmailPresenter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">recently_added_works</span>
</span><span class='line'>    <span class="vi">@recently_added_works</span> <span class="o">||=</span> <span class="n">build_recently_added_works</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build_recently_added_works</span>
</span><span class='line'>    <span class="c1"># Code to do database lookups</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we&#8217;re doing is moving the actual code that&#8217;s doing the heavy lifting into a <code>private</code> method (for convention, I like to prefix the name with <code>build_</code>). The public method that we refer to elsewhere in our presenter and template simply calls the appropriate <code>private</code> method. Through using an instance variable combined with conditional assignment, we guarantee that the <code>build_</code> method (our heavy and slow workhorse method) will only be called once, no matter how many times we refer to the public method.</p>

<p>That&#8217;s it! To summarize, use instance variables in your public methods which is what your templates and other code will use. Those public methods should call private <code>build_</code> methods which actually do all the heavy lifting. This way, you get to easily move logic away from a template and into its own module, and can guarantee that you&#8217;re not repeating any long-running database queries or other slow data processing.</p>

<p>Hopefully you&#8217;ve found this a useful pattern to follow, please leave any feedback in the comments and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Helper to Group Artworks into a Pinterest-style Layout for Email]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/"/>
    <updated>2014-03-17T19:32:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-03-17-ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/two-column-layout.png" alt="Example of two column layout" /></p>

<p>Something we&#8217;d like to do is email our users some suggested artworks as part of their personalized emails. The layout of those suggestions should look something like our newly re-designed <a href="https://artsy.net/browse/artworks?price_range=-1%3A1000000000000">Browse</a> page, with a &#8216;salon&#8217; style layout. Here&#8217;s some simple Ruby code that can group artworks into columns for you, that can then be directly rendered in an email (via <a href="http://haml.info/">Haml</a>, <a href="http://mustache.github.io/">Mustache</a>, <a href="http://jade-lang.com/">Jade</a>, or your templating language of choice.)</p>

<!-- more -->


<h2>The code</h2>

<p>First let&#8217;s look at the code, and then I&#8217;ll describe it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ArtworkColumns</span>
</span><span class='line'>  <span class="c1"># Return an array of artworks grouped together in sub arrays by being added to the shortest &#39;column&#39;</span>
</span><span class='line'>  <span class="c1"># based on a fixed width and aspect ratios.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># @param {Array} artworks The array of artworks to group into columns</span>
</span><span class='line'>  <span class="c1"># @param {Number} num_columns The number of columns to group them into</span>
</span><span class='line'>  <span class="c1"># @param {Number} width The width the images will be displayed at</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># @return {Array} An array of artworks grouped into sub arrays by being added to the shortest one.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">artwork_columns</span><span class="p">(</span><span class="n">artworks</span><span class="p">,</span> <span class="n">num_columns</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">artwork_cols</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Initialize columns</span>
</span><span class='line'>    <span class="n">num_columns</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">artwork_cols</span> <span class="o">&lt;&lt;</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artworks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>      <span class="n">add_to_shortest_column!</span><span class="p">(</span><span class="n">artwork_cols</span><span class="p">,</span> <span class="n">artwork</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artwork_cols</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Adds artwork to shortest column</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_to_shortest_column!</span><span class="p">(</span><span class="n">artwork_cols</span><span class="p">,</span> <span class="n">artwork</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">min_height</span> <span class="o">=</span> <span class="n">column_height</span><span class="p">(</span><span class="n">artwork_cols</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">min_column_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artwork_cols</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">column</span><span class="p">,</span> <span class="n">idx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">height</span> <span class="o">=</span> <span class="n">column_height</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">height</span> <span class="o">&lt;</span> <span class="n">min_height</span>
</span><span class='line'>        <span class="n">min_height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>        <span class="n">min_column_idx</span> <span class="o">=</span> <span class="n">idx</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artwork_cols</span><span class="o">[</span><span class="n">min_column_idx</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">artwork</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Calculate sum of heights of artworks in column</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">column_height</span><span class="p">(</span><span class="n">artwork_col</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">artwork_col</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">aspect_ratio</span> <span class="o">=</span> <span class="n">artwork</span><span class="o">.</span><span class="n">default_image</span><span class="o">.</span><span class="n">aspect_ratio</span><span class="p">)</span>
</span><span class='line'>        <span class="n">height</span> <span class="o">+=</span> <span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="n">aspect_ratio</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">height</span> <span class="o">+=</span> <span class="n">width</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">height</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The algorithm is quite simple (original JS idea and implementation courtesy of Artsy&#8217;s <a href="https://github.com/gib">Gib</a>). The inputs are fairly obvious, an array of artworks to be grouped, the number of columns to group them into, and the width of each column.</p>

<p>We then simply iterate over all our artworks, and add them to whichever column is shortest. This way we end up with several columns that are for the most part equally sized in height, and as they all have different aspect ratios, when they are rendered in a table, you wind up with a nice looking &#8216;dynamic&#8217; layout. The height of each column is calculated as the sum of the heights of the artworks in each column. The heights are derived from the inputted widths and aspect ratios of the images.</p>

<p>Here&#8217;s how you might iterate over the returned column groupings and render a layout similar to the above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">artwork_suggestions</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork_arr</span><span class="p">,</span> <span class="n">idx</span><span class="o">|</span>
</span><span class='line'>  <span class="nt">%td</span><span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;artwork-column&#39;</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="s2">&quot;width: 290px;padding-top:20px;text-align:left;&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">-</span> <span class="n">artwork_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>      <span class="nt">%a</span><span class="p">{</span> <span class="ss">href</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">canonical_url</span><span class="si">}</span>/artwork/<span class="si">#{</span><span class="n">artwork</span><span class="o">.</span><span class="n">slug</span><span class="si">}</span>?<span class="si">#{</span><span class="vi">@utm_params</span><span class="si">}</span>&quot; }&lt;
</span><span class='line'>        <span class="nt">%img</span><span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;artwork&#39;</span><span class="p">,</span> <span class="ss">src</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">artwork</span><span class="o">.</span><span class="n">default_image</span><span class="o">.</span><span class="n">image_url</span><span class="p">(</span><span class="ss">:large</span><span class="p">)</span><span class="si">}</span>&quot;, style: &quot;width: 290px;&quot; }
</span><span class='line'>      <span class="nt">%br</span>
</span><span class='line'>      &lt;!-- additional artwork details, title, artist, etc. --&gt;
</span></code></pre></td></tr></table></div></figure>


<p>These few lines of Ruby code have allowed us to move logic out of Haml (yuck!) and into Ruby (yay!) and allow <a href="http://haml.info/">Haml</a> to just focus on rendering the objects passed in (certainly via loops and conditionals, etc.)</p>

<p>That&#8217;s all for now! In my next post I&#8217;ll talk about how I use the Presenter pattern and memoization to move even more logic out of templates (and save some database calls while we&#8217;re at it!)</p>

<p>Thanks again! Post any comments or tips of your own here, and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Tips for Email Layout and Responsiveness]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/"/>
    <updated>2014-03-17T12:36:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/analytics.png" alt="Example of Analytics Email" /></p>

<p>Email can be one of the most powerful ways to engage with your users, and can serve a multitude of purposes. It can be used as a way to highlight selected content (weekly/monthly newsletters, &#8216;year in review&#8217;, etc.), provide a service to users (analytics breakdown of visits to your profile/favorites page), or re-engage with users (new feature announcements, etc.). Here at Artsy we use all of these kinds of emails and have found them to be a very valuable asset. However, best practices for template layout and CSS (keeping in mind the variety of devices and screen sizes that your users have) are quite different from, and very far behind, the current HTML5 standards and practices for making beautiful web pages. In this article, I&#8217;d like to present some techniques I&#8217;ve successfully used at Artsy to create emails that look good on your browser or mobile device, in some of the most popular email clients out there.</p>

<!-- more -->


<h2>The Main Difference Between Email and Web</h2>

<p>A fundamental difference between email and web, and which essentially accounts for the completely different methodology and rules you should follow for emails, is that of the rendering client. In 2014, (assuming you are not supporting certain legacy versions of Internet Explorer and other old versions), browsers for the most part will render passed in HTML and CSS in a standard fashion. While there are some notable exceptions still, graceful degradation is quite possible. That is because the only &#8216;interpreter&#8217; of your HTML is the end user&#8217;s browser, which operates under a certain set of known rules. With emails however, the interpreter is the end user&#8217;s mail client of choice, which can be: native iOS apps, web apps, and even standalone desktop applications. All of these do their own parsing/interpreting before rendering, which can cause HTML that results in a nice looking web page to look totally broken in an email, as well as the same exact email looking remarkably different across mail clients. One of the main reasons why email clients do this is to remove things that might interfere with the rendering of the mail client itself, or any security risks.</p>

<p>Also of note is that the use of Javascript within an email is of course, not possible. Additionally, the HTML that will be emailed to your users needs to be sent as one file with inlined CSS. You can use a tool like <a href="https://github.com/premailer/premailer/">premailer</a> to allow you to develop your CSS separately and then convert to an inline style.</p>

<h2>Some Basics about Tables</h2>

<p>Yes, it&#8217;s 2014, and yes, we&#8217;re going to talk about tables on an engineering blog. That&#8217;s because for emails, tables are going to be your main tool to position and lay out your content. Two of the most common CSS selectors (<code>position</code> and <code>display</code>) are bad ideas to use in email. They are mostly unsupported by mail clients (which will reach in and rewrite your HTML/CSS) and will lead to unexpected looking output. However, you can achieve virtually any layout desired using tables.</p>

<p>Here is sample HTML that generates the top part of the email shown above. While it may make your eyes bleed from the table use, notice we are able to achieve the beginnings of a basic 3-column layout, with equal-width columns and centered headers/text with no position-related CSS.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&#39;0&#39;</span> <span class="na">cellpadding=</span><span class="s">&#39;0&#39;</span> <span class="na">cellspacing=</span><span class="s">&#39;0&#39;</span> <span class="na">style=</span><span class="s">&#39;margin: 0 20px; table-layout: fixed;&#39;</span> <span class="na">width=</span><span class="s">&#39;600px&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;center&#39;</span> <span class="na">colspan=</span><span class="s">&#39;3&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15px&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em; letter-spacing:2px;text-transform:uppercase;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        Cats Galore at the Cat Art Fair 2014
</span><span class='line'>      <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;left&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15px; border-right: 1px solid grey;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center; font-size: 23px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          24
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          works
</span><span class='line'>          in your booth
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;middle&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15px; border-right: 1px solid grey;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center; font-size: 23px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          3,086
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          total artwork views
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;right&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center; font-size: 23px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        471
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        cities reached
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- more content below --&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now under this we present a heatmap and table of top views by city. For that we use the same 3-column table, except specify a colspan of 2 on the column that contains the heatmap. That is because we would like that column to take up a width equal to the first 2 columns of the equally spaced three at the top, and the table of top views will take up the last column. Here&#8217;s that markup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;tr&gt;</span>
</span><span class='line'><span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;left&#39;</span> <span class="na">colspan=</span><span class="s">&#39;2&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15pxl; width: 66%;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;link_to_heatmap.png&#39;</span> <span class="na">width=</span><span class="s">&#39;400px&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;right&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 23px 15px; width: 33%; text-align:left;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 12px; line-height: 1.3em; font-weight:bold;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    Top 10 Cities
</span><span class='line'>  <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>  <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 12px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    New York
</span><span class='line'>    21.66%
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>    London
</span><span class='line'>    3.34%
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- &#39;br&#39; separated string of views --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/font&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that again we are using no position or display related CSS. However, now our table has a 3 column section and a 2 column section, and we are well on our way to creating a nice email! I kept these as separate rows in the same table, but could have equivalently had each of them be their own table with no ill effects and almost the same markup. Depending on your design and layout, you may need to have multiple tables (nested and not) to support different widths and column layouts, however they should all just <em>work</em>.</p>

<h2>Background Images and Overlayed Text</h2>

<p>Ok, so tables are all well and good and you can achieve a lot using them, and without having to use any display or position CSS. But what if you want to overlay text on an image? (or even another image over an image)? On a web page, there are many ways to accomplish that, but they all use CSS that you really should not be using in emails (namely: <code>position</code>, <code>display</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, and most layout properties besides padding. Also, no negative padding please!). But no worries, because you can still accomplish that using background images!</p>

<p>Here is an example from our current welcome mail to users:</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/welcome_desktop.png" alt="Example of Welcome Mail" /></p>

<p>The top part (the iPhone pic) is actually two images (the picture, and the App Store logo), as well as some text overlayed on top. Here is the HTML to accomplish that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">cellpadding=</span><span class="s">&#39;0&#39;</span> <span class="na">cellspacing=</span><span class="s">&#39;0&#39;</span> <span class="na">id=</span><span class="s">&#39;iphone-table&#39;</span> <span class="na">style=</span><span class="s">&#39;border: 0;padding:10px 0px 15px 0px;width:625px&#39;</span> <span class="na">width=</span><span class="s">&#39;625&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;left&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">background=</span><span class="s">&#39;link_to_phone.png&#39;</span> <span class="na">cellpadding=</span><span class="s">&#39;0&#39;</span> <span class="na">cellspacing=</span><span class="s">&#39;0&#39;</span> <span class="na">height=</span><span class="s">&#39;265&#39;</span> <span class="na">style=</span><span class="s">&#39;height:265px;width:625px&#39;</span> <span class="na">width=</span><span class="s">&#39;625&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">&#39;padding-top:57px;padding-right:53px;padding-left:375px;text-align:center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;line-height:26px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;font</span> <span class="na">style=</span><span class="s">&#39;text-transform: uppercase; font-size: 19px; font-family: Georgia, serif; color: white;-webkit-font-smoothing:antialiased;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                Download Artsy for iPhone
</span><span class='line'>              <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;padding-top:10px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;font</span> <span class="na">style=</span><span class="s">&#39;font-size: 14px; font-family: Georgia, serif; color: white;-webkit-font-smoothing:antialiased;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                The art world in your pocket.
</span><span class='line'>              <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;right&#39;</span> <span class="na">style=</span><span class="s">&#39;padding-right:82px;vertical-align:top;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;https://itunes.apple.com/us/app/artsy-art-world-in-your-pocket/id703796080?ls=1&amp;amp;mt=8&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;app_store.png&#39;</span> <span class="na">style=</span><span class="s">&#39;border: none; outline: none; vertical-align:top;&#39;</span> <span class="na">width=</span><span class="s">&#39;140px&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose to use a separate table to hold this content, where the background image for this table is the picture of the iPhone in hand. That table (with a background of the photo) has two rows, each with one column. The first row which is for the top part of the image, contains the &#8216;Download&#8217; white text. That is positioned within the column through padding, which is well supported by most mail clients (as long as it&#8217;s positive padding that is!) The second row, for the bottom part of the image, is a picture of the &#8216;Download on the App Store&#8217; logo, and we chose to put that in an anchor tag and link to the App Store. You could have alternatively made this image a background as well to achieve the same overlay effect, as well as added more overlaid text, etc.</p>

<p>Essentially, to overlay text on images, and images on images - your only option in email is to use background images.</p>

<h2>Mobile Responsiveness</h2>

<p>Ok, at this point we know how to craft some &#8216;dynamic&#8217; layouts, (multi-column, sidebar, etc) and can overlay text and images for added effect. Now let&#8217;s think about how this should work/look on a mobile device. Media queries will be our tool of choice here (well supported by mobile mail clients, with a notable exception being the Gmail iOS app.)</p>

<p>Something to keep in mind, depending on your use case, is to potentially design the email in the first place with mobile in mind. This can mean larger font sizes across the layout, as well as a single or two column layout max for your content. Since you have much less screen space to work with on mobile, the media queries we are going to use will largely be to increase font sizes, as well as using &#8216;width&#8217; and &#8216;float&#8217; to force a two column layout into one column (as an example). Depending on the mail design, this can be simple to do, or quite tricky. It&#8217;s worth considering this in your initial designs.</p>

<p>Now the first thing to do is to include the following meta tag in your HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&#39;viewport&#39;</span> <span class="na">content=</span><span class="s">&#39;width=device-width, initial-scale=1.0&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell the browser to treat the viewport size as the size of the device that is being used. This combined with media queries will enable us to create mobile emails.</p>

<p>As an example, consider the following two images. The first is the desktop version of the top part of a personalized weekly mail (blog post on how we efficiently generate these to come!), and the second is the mobile version of that same mail.</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_desktop.png" alt="Example of Personalized Desktop" /></p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_summary.png" alt="Example of Personalized Mobile" /></p>

<p>The markup for this is pretty vanilla (similar to above, 3 column layout in a table). For mobile, we want to left-align everything and trim things down to one column. Of note here is that we are truncating text with ellipsis in the desktop version, and when the content reflows to one column we actually have <em>more</em> room to reveal the text (but still keeping truncation in just in case), so we have to enclose the text in a <code>div</code> (must have a block element for truncation)</p>

<p>Here is how we truncate text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;row-to-expand&#39;</span> <span class="na">style=</span><span class="s">&#39;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:150px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    Some really long text that will get truncated
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We specify a width on a block-level element and then use the ellipsis trick. Here&#8217;s another screenshot of the truncation in action:</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_shows.png" alt="Example of Shows Listing" /></p>

<p> Our first media query can be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="k">@media</span> <span class="o">(</span><span class="nt">max-device-width</span><span class="o">:</span> <span class="nt">320px</span><span class="o">)</span><span class="p">{</span>
</span><span class='line'>    <span class="nt">div</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;row-to-expand&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">260px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve set the breakpoint at 320px (vertical layout on an iPhone), and at widths less than or equal to that, this rule will kick in. Note the &#8216;!important&#8217; at the end (all of our media queries will have that to allow them to override the existing inline CSS). This is enough to expand that div and reveal more text.</p>

<p>Here&#8217;s the media queries for the rest of this section that transforms the three column layout into one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="k">@media</span> <span class="o">(</span><span class="nt">max-device-width</span><span class="o">:</span> <span class="nt">320px</span><span class="o">)</span><span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;summary-col&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span> <span class="k">left</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;summary-header&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span> <span class="k">right</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">300px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;nested-summary-col&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">300px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span> <span class="k">left</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>      <span class="k">padding</span><span class="o">:</span> <span class="m">0px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">table</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;summary&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">300px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the <code>td[id='nested-summary-col']</code> are the <code>td</code>s that hold the thumbnail and artist or gallery name.
Essentially all we are doing is changing the width of the container/parent table to 300px, and then making the width of each <code>td</code> 300px and adding a float. This will force your table to now be a one column layout- easy!</p>

<h3>Some misc. email tweaks</h3>

<p>Sometimes it becomes necessary to hide/show certain things for mobile or desktop. This can be a bit tricky due to not being able to use <code>display:none;</code> , so here are a few things I&#8217;ve found that worked:</p>

<ul>
<li><code>width: 0px;</code> (works for hiding images)</li>
<li><code>line-height: 0px;</code> (works for hiding text)</li>
<li><code>font-size: 0px;</code> (works for hiding text)</li>
</ul>


<p>Another thing you might encounter is that text links automatically become blue in email. This is because many mail clients will take an un-styled or black link text and make them a default blue color. An easy hack to get around this is to explicitly color your links something like &#8216;#000001&#8217;. This &#8216;almost-black&#8217; will be left untouched by mail clients, yet is close enough to black that the naked eye can&#8217;t perceive the difference.</p>

<p>Here&#8217;s a screenshot of an <a href="https://github.com/desandro/isotope">isotope</a> or <a href="https://www.pinterest.com/">Pinterest</a> column style layout, with truncation of text, and resized for mobile (running the full gamut of tricks):</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_suggestions.png" alt="Example of Personalized Suggestions" /></p>

<p><a href="https://gist.github.com/mzikherman/9610125">Here is a gist</a> I use to prepare artworks for a columnar display like this. You pass in a collection of artworks (where each artwork is arbitrarily sized), and the number of columns and width of the desired output. It will return the artworks grouped into columns that can be directly rendered in an email, while respecting aspect ratios and ensuring the columns are of <em>approximately</em> equal height - resulting in a dynamic feeling layout. For this email, we group this set of artworks into 2 coumns, with each column having a width of 300px (for desktop).</p>

<h2>Great tools to use:</h2>

<ul>
<li><a href="https://github.com/premailer/premailer/">Premailer</a> This will enable you to develop CSS in a sane (ie- not inline) way, and then at generation/compile time, inline it for you.</li>
<li><a href="http://litmus.com/">Litmus</a> Using Litmus&#8217;s VM&#8217;s with different OS&#8217;s and mail clients, you can preview how a sample email will look among all sorts of different configurations. I recommend figuring out what mail clients/browsers/OS&#8217;s you want to target and making sure you test all your emails here.</li>
<li><a href="http://haml.info/">Haml</a> (or any templating language of choice). A lot of the blocks of content in our mails are dynamically generated, and Haml&#8217;s conditionals and looping syntax, as well as
Ruby-style string evaluation has proven invaluable.</li>
</ul>


<hr />

<p>That&#8217;s all for now! With a lot of trial and error, I&#8217;ve built up a toolbelt of tricks, techniques and hacks I&#8217;ve been using to develop responsive and pretty emails quickly. I think of the limited set of tools at my disposal as a puzzle with which you can still create great looking and responsive layouts to feature your content. Previewing mails using <a href="http://mailchimp.com/features/inbox-inspector/">Inbox Inspector</a> have enabled me to craft, deploy, and send them to our users with confidence. Post any comments or tips of your own here, and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detecting trends using Forgetsy]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/detecting-trends-with-forgetsy/"/>
    <updated>2014-03-17T11:32:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/detecting-trends-with-forgetsy</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-03-17-detecting-trends-with-forgetsy/monolith.jpg" alt="Armory Trending Screen" /></p>

<p>As part of our partnership with <a href="https://www.thearmoryshow.com/">The New York Armory Show</a> this year, we installed a number of terminals throughout the fair. These screens used our own real-time data to display an ever shifting set of trending artworks, artists, and booths, to the attendees.</p>

<p>Out of this work, we&#8217;ve open-sourced <a href="https://github.com/cavvia/forgetsy">Forgetsy</a>, a lightweight Ruby trending library. Put simply, Forgetsy implements data structures that forget. Loosely based on Bit.ly&#8217;s <a href="http://word.bitly.com/post/41284219720/forget-table">Forget Table</a> concept, Forgetsy uses decaying counters to track temporal trends in categorical distributions.</p>

<!-- more -->


<h2>Anatomy of a Trend</h2>

<p>To clarify the term &#8216;trend&#8217;, let&#8217;s take this graph of cumulative artist searches over time as an example.</p>

<p><img src="http://artsy.github.io/images/2014-03-17-detecting-trends-with-forgetsy/searches.png" alt="Artist Search Graphs" /></p>

<p>On the left-hand side, we see a steepening gradient (denoted by the dashed lines) for Banksy during his residency in New York (Oct 2013), but in contrast a linear rise in searches for Warhol over the same period. We define a &#8216;trend&#8217; as this rise in the <em>rate</em> of observations of a particular event over a time period, which we&#8217;ll call Ï.</p>

<p>In Forgetsy, trends are encapsulated by a construct named <em>delta</em>. A <em>delta</em> consists of two sets of counters, each of which implements <a href="https://en.wikipedia.org/wiki/Exponential_decay">exponential decay</a> of the following form.</p>

<p><img src="http://latex.codecogs.com/gif.latex?X_t_1%3DX_t_0%5Ctimes%7Be%5E%7B-%5Clambda%5Ctimes%7Bt%7D%7D%7D" alt="Exponential Decay" /></p>

<p>Where the inverse of the decay rate (Î») is the lifetime of an observation in the set, Ï. By normalising one set by a set with half the decay rate (or double the lifetime), we obtain a trending score for each category in a distribution. This score expresses the change in the rate of observations of a category over the lifetime of the set, as a proportion in the range [0,1].</p>

<p>Forgetsy removes the need for manually sliding time windows or explicitly maintaining rolling counts, as observations naturally decay away over time. It&#8217;s designed for heavy writes and sparse reads, as it implements decay at read time. Each set is implemented as a <a href="http://redis.io/">redis</a> sorted set, and keys are scrubbed when a count is decayed to near zero, providing storage efficiency.</p>

<p>As a result, Forgetsy handles distributions with up to around 10<sup>6</sup> active categories, receiving hundreds of writes per second, without much fuss.</p>

<h2>Usage</h2>

<p>Take a social network in which users can follow each other. You want to track trending users. You construct a delta with a one week lifetime, to capture trends in your follows data over one week periods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">follows_delta</span> <span class="o">=</span> <span class="ss">Forgetsy</span><span class="p">:</span><span class="ss">:Delta</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;user_follows&#39;</span><span class="p">,</span> <span class="ss">t</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The delta consists of two sets of counters indexed by category identifiers. In this example, the identifiers will be user ids. One set decays over the mean lifetime specified by Ï, and another set decays over double the lifetime.</p>

<p>You can now add observations to the delta, in the form of follow events. Each time a user follows another, you increment the followed user id. You can also do this retrospectively:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s1">&#39;UserFoo&#39;</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s1">&#39;UserBar&#39;</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="mi">10</span><span class="o">.</span><span class="n">days</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s1">&#39;UserBar&#39;</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Providing an explicit date is useful if you are processing data asynchronously. You can also use the <code>incr_by</code> option to increment a counter in batches. You can now consult your follows delta to find your top trending users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">follows_delta</span><span class="o">.</span><span class="n">fetch</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="s1">&#39;UserFoo&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">789</span><span class="p">,</span> <span class="s1">&#39;UserBar&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">367</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each user is given a dimensionless score in the range [0,1] corresponding to the normalised follows delta over the time period. This expresses the proportion of follows gained by the user over the last week compared to double that lifetime.</p>

<p>Optionally fetch the top <em>n</em> users, or an individual user&#8217;s trending score:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">n</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">bin</span><span class="p">:</span> <span class="s1">&#39;UserFoo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information on usage, check out the <a href="https://github.com/cavvia/forgetsy">github project</a> page.</p>

<h2>In the Wild</h2>

<p>In practice, we use linear, weighted combinations of deltas to produce trending scores for any given domain, such as artists. Forgetsy doesn&#8217;t provide a server, but we send events to an rpc service that updates the deltas in a streamed manner. These events might include artist follows, artwork favorites, auction lot sales or individual page views.</p>

<p>One requirement we have is lifetime flexibility. Forgetsy lets us stipulate the trending period Ï on a delta by delta basis. This allows us to lower the lifetime significantly in a fair context, in which we track trends over just a few hours, contrasted with a general art market context, in which we&#8217;re interested in trends over weeks and months.</p>

<p>In summary, the delta structures provided by Forgetsy provide you with a simple, scalable, transparent base for a trending algorithm that can be tuned to suit the specific dynamics of the domain in question.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Isolating Spurious and Nondeterministic Tests]]></title>
    <link href="http://artsy.github.io/blog/2014/01/30/isolating-spurious-and-nondeterministic-tests/"/>
    <updated>2014-01-30T14:42:00-05:00</updated>
    <id>http://artsy.github.io/blog/2014/01/30/isolating-spurious-and-nondeterministic-tests</id>
    <content type="html"><![CDATA[<p>Testing is a critical part of our workflow at <a href="https://artsy.net">Artsy</a>. It gives us confidence to make regular, aggressive enhancements. But anyone who has worked with a large, complex test suite has struggled with occasional failures that are difficult to reproduce or fix.</p>

<p>These failures might be due to slight timing differences or lack of proper isolation between tests. Integration tests are particularly thorny, since problems can originate not only in application code, but in the browser, testing tools (e.g., <a href="http://docs.seleniumhq.org/">Selenium</a>), database, network, or external APIs and dependencies.</p>

<h2>The Quarantine</h2>

<p>We&#8217;ve been <a href="http://artsy.github.io/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">automatically retrying failed tests</a>, with some success. However, these problems tend to get worse. (If you have 10 tests that each have a 1% chance of failing, roughly 1 in 10 builds will fail. If you have 50, 4 in 10 builds will fail.)</p>

<p>Martin Fowler offers the most compelling thoughts on this topic in <a href="http://martinfowler.com/articles/nonDeterminism.html">Eradicating Non-Determinism in Tests</a>. (Read it, really.) He suggests quarantining problematic tests in a separate suite, so they don&#8217;t block the build pipeline.</p>

<!-- more -->


<h2>Setting it up</h2>

<p>This turned out to be pretty easy to set up, using our preferred tools of <a href="https://relishapp.com/rspec">RSpec</a> and <a href="http://travis-ci.com/">Travis</a>. First, tag a problem test with <code>spurious</code>:</p>

<pre><code>it 'performs tricky browser interaction', spurious: true do
  ...
end
</code></pre>

<p>Your continuous integration script can exclude the tagged tests as follows:</p>

<pre><code>bundle exec rspec --tag ~spurious
</code></pre>

<p>We&#8217;d like to be aware of spurious failures, but not allow them to fail the build. In our app&#8217;s <code>.travis.yml</code> file, this is as simple as adding a script entry that always exits with <code>0</code> status:</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
script:
  - "bundle exec rspec --tag ~spurious"
  - "bundle exec rspec --tag spurious || true"
</code></pre>

<p>We&#8217;ll see any spurious failures in the build&#8217;s output, but our pipeline won&#8217;t be affected.</p>

<h2>Bonus: Limiting quarantined tests</h2>

<p>So, what prevents the quarantine from getting larger and larger, while the test suite gets weaker and weaker? Fowler <a href="http://martinfowler.com/articles/nonDeterminism.html#Quarantine">recommends</a> enforcing a limit on the number of quarantined tests (e.g., 8).</p>

<p>We can even trigger a build failure if the limit is exceeded. This <code>.travis.yml</code> writes the spurious suite&#8217;s abbreviated output to a file, then asserts that the summary mentions no more than &#8220;8 examples&#8221;:</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
script:
  - "bundle exec rspec --tag ~spurious"
  - "bundle exec rspec --tag spurious --format documentation --format progress --out spurious.out || true"
  - "[[ $(grep -oE '^\d+' spurious.out) -le 8 ]]"
</code></pre>

<h2>Conclusion</h2>

<p>The quarantine is no excuse to create tests that fail under realistic conditions. It&#8217;s simply a framework for recognizing and, eventually, fixing or eliminating the problematic tests that inevitably crop up in a complex environment.</p>

<p>Hopefully, our experiment is useful to other teams struggling with unreliable builds. Share any feedback in the comments!</p>
]]></content>
  </entry>
  
</feed>
