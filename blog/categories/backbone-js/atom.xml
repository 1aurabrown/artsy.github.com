<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbone.js | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2013-05-17T13:12:27-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bootstrapping JSON Data with Rails and Backbone.js]]></title>
    <link href="http://artsy.github.io/blog/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/"/>
    <updated>2013-04-13T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js</id>
    <content type="html"><![CDATA[<p>The <a href="http://artsy.net">artsy.net website</a> is a Backbone.js application that talks to a server-side RESTful Grape API sitting on top of a Rails app which serves minimal HTML markup. The latter includes such things as a page title, along with links to JavaScript and stylesheet packages. A page loads, scripts run, data is fetched from the API. The result is merged into a HAMLJS template and rendered client-side.</p>

<p>Building this kind of one-page apps allows for clean separation between the presentation and API layers. The downside is that it will slow page render times - fetching data after page load means waiting for an AJAX request to complete before displaying anything.</p>

<p>There're many solutions to this problem, all involving some kind of server-side rendering. You could, for example, share views and JavaScript between client and server. This would be a major paradigm shift for a large application like ours and not something we could possibly maneuver in a short amount of time.</p>

<p>Without changing the entire architecture of the system, how can we bootstrap JSON data server-side and avoid the data roundtrip on every page load?</p>

<!-- more -->


<h3>Model Repository</h3>

<p>First, we need to keep track of our objects on the client. We've implemented a simple data repository. It ensures that the same model is passed around instead of instantiating new models each time. This helps prevent unnecessary trips to the server, and makes sure events are bound to the same model instance.</p>

<p>``` coffeescript
App.Repository =</p>

<p>  # Gets a model from the repository or fetches it from the server.
  getOrFetch: (id, options) -></p>

<pre><code>model = @get(id)
if model?
  options?.success? options, model
  model
else
  model = new @model({ id: id })
  model.fetch options
  @add model
model
</code></pre>

<h1>Function to extend a collection in to a repository</h1>

<p>App.Repository.extend = (collectionClass) ->
  collection = new collectionClass
  repository = _.extend collection, App.Repository
  repository.collectionClass = collectionClass
  repository
```</p>

<p>Objects of the same type are stored together in a repository collection.</p>

<p>``` coffeescript
class App.Collections.Artists extends Backbone.Collection</p>

<p>  model: App.Models.Artist
  App.Repositories.Artists = App.Repository.extend @</p>

<p>```</p>

<h3>Fetching Data</h3>

<p>A view requires data before it can be rendered. For example, navigating to <a href="http://artsy.net/artist/hendrik-kerstens">artsy.net/artist/hendrik-kerstens</a> (a Dutch photographer who obsessively took pictures of his daughter in all kinds of artificial setups for 20 years) will call the following.</p>

<p>``` coffeescript
class App.Views.ArtistView extends Backbone.View</p>

<p>  render: -></p>

<pre><code>App.Repositories.Artists.getOrFetch @options.artistId,
  success: (artist) =&gt;
    @$el.html(JST['templates/artist/show']({ artist: artist }))
</code></pre>

<p>```</p>

<h3>Bootstrapping Data</h3>

<p>Since our implementation sits on top of a Rails app, we can now bootstrap the data in a server-side Rails view without any JavaScript code changes. The following example lives in <code>app/views/artists/_bootstrap.html.haml</code>.</p>

<p><code>javascript
:javascript
  var json = $.parseJSON("#{j @artist.to_json}")
  App.Repositories.Artists.add(new App.Models.Artist(json));
</code></p>

<p>You must encode JSON data inside a Rails template, otherwise unicode characters like U+2028 become actual line-endings. This has been discussed <a href="http://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character">here</a> and <a href="http://stackoverflow.com/questions/9691611/print-valid-non-escaped-json-in-a-view-with-rails">here</a>. The <code>j</code> above is an alias for <code>escape_javascript</code>.</p>

<p>The Rails view layout calls <code>yield :javascript</code> and the <code>show.html.haml</code> template includes the bootstrapped data as a partial.</p>

<p><code>haml
= content_for :javascript do
  = render partial: "artists/bootstrap"
</code></p>

<p>The generated HTML includes the escaped JSON representation of the artist, which will be parsed client-side when the page loads and inserted into <code>App.Repositories.Artists</code>. The <code>App.Views.ArtistView</code> will no longer need to fetch the data from the server with an AJAX call.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing #! Routes with PushState Using Backbone.js]]></title>
    <link href="http://artsy.github.io/blog/2012/06/25/replacing-hashbang-routes-with-pushstate/"/>
    <updated>2012-06-25T11:35:00-04:00</updated>
    <id>http://artsy.github.io/blog/2012/06/25/replacing-hashbang-routes-with-pushstate</id>
    <content type="html"><![CDATA[<blockquote><p>The only constant is change, continuing change, inevitable change, that is the dominant factor in society
[and web apps!] today. No sensible decision can be made any longer without taking into account not only
the world as it is, but the world as it will be.</p>

<p>&ndash; Isaac Asimov</p></blockquote>

<h2>R.I.P #!</h2>

<p>It did not take us long to discover we shared the concerns of Twitter's
<a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb on hashbang routes</a>,
but it was almost a year before we were able to remove them from Artsy. Here's how it went down.</p>

<p>Artsy relies on the <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> framework for our client application
which offers a solid pushState routing scheme. This includes a seamless hashtag fallback for
<a href="http://caniuse.com/#feat=history">browsers that don't support the HTML5 History API</a> (looking at you IE 9).</p>

<p>The pushState routing is optional, but <em>"the world as it should be"</em> suggests we say "Yes!" (or true) to pushState.
<code>coffeescript
Backbone.history.start({ pushState: true })
</code></p>

<!-- more -->


<h3>The Client</h3>

<p>At Artsy, we had left Backbone out of the loop for most of our internal linking. Our markup href attributes all
began with '/#!' and expected the browser's default hash behavior to keep the page from refreshing. For a proper
pushState scheme, the app's internal linking should begin with an absolute route. Backbone.js defaults to '/', but
this is configurable.
```coffeescript</p>

<h1>Optional root attribute defaults to '/'</h1>

<p>Backbone.history.start
  pushState: true
  root: "/specialized/client/"
```</p>

<h4>Internal Links</h4>

<p>All internal links need to begin with your configured root ('/' for Artsy).
Be sure to leave out your domain (<del>http://artsy.net</del>).
```html
<a href="http://artsy.github.io/">Home</a></p>

<p><a href="http://artsy.github.io/artwork/matthew-abbott-lobby-and-supercomputer">My Favorite Work</a>
```</p>

<p>We now needed a global link handler that will leverage Backbone's <code>navigate</code> method which takes
care of updating the URL and avoiding a page refresh or alternatively wiring up the hashtag fallback.
Since we follow the convention of starting all <code>href</code> attributes with our application's root, we
can match on that in our selector to get all anchors whose link begins with our root, <code>a[href^='/']</code>.
This link handler is a great place to ensure backward compatibility while #!s are removed from
internal links.</p>

<p>```coffeescript</p>

<h1>Globally capture clicks. If they are internal and not in the pass</h1>

<h1>through list, route them through Backbone's navigate method.</h1>

<p>$(document).on "click", "a[href<sup>='/']",</sup> (event) -></p>

<p>  href = $(event.currentTarget).attr('href')</p>

<p>  # chain 'or's for other black list routes
  passThrough = href.indexOf('sign_out') >= 0</p>

<p>  # Allow shift+click for new tabs, etc.
  if !passThrough &amp;&amp; !event.altKey &amp;&amp; !event.ctrlKey &amp;&amp; !event.metaKey &amp;&amp; !event.shiftKey</p>

<pre><code>event.preventDefault()

# Remove leading slashes and hash bangs (backward compatablility)
url = href.replace(/^\//,'').replace('\#\!\/','')

# Instruct Backbone to trigger routing events
App.router.navigate url, { trigger: true }

return false
</code></pre>

<p>```
Thank you TenFarms for the excellent write up on <a href="http://dev.tenfarms.com/posts/proper-link-handling">proper link handling for pushState enabled browsers</a>.</p>

<h4>External Links</h4>

<p>The application will need a small check early in the initialization process to redirect external
links still expecting the #! routing scheme.
```coffeescript</p>

<h1>Our Backbone App namespace</h1>

<p>window.App =
  # Namespace Backbone components
  Models: {}
  Collections: {}
  Views: {}
  redirectHashBang: -></p>

<pre><code>window.location = window.location.hash.substring(2)
</code></pre>

<h1>DOM is ready, are we routing a #!?</h1>

<p>$ ->
  if window.location.hash.indexOf('!') > -1</p>

<pre><code>return App.redirectHashBang()
</code></pre>

<p>  # else... continue on with initialization
```</p>

<h3>The Server</h3>

<p>Now that our app will receive requests to full URLs
'http://artsy.net/artwork/mattew-abbott-lobby-and-supercomputer'
instead of 'http://artsy.net/#!/artwork/mattew-abbott-lobby-and-supercomputer',
we need to update our Rails setup.</p>

<p>Below is an excerpt from our Rails application's router.
Note references to our home and artworks controllers. Both use a <code>before</code> filter
to determine a user's authentication state and serve a different layout, with
unique assets or Backbone applications.</p>

<p>Controllers related to specific models now have the opportunity to
bootstrap associated JSON or mark up and we now get expected 404 (file not found)
error behavior without extra work required by a hash routing scheme.</p>

<p>```ruby</p>

<h1>Server - Rails</h1>

<p>Application.routes.draw do</p>

<p>  root :to => "home#index"</p>

<p>  # Controller logic determines the layout and could bootstrap data
  resources :artworks, path: "artwork", only: :show</p>

<p>  # Plural to singular redirect - mistakes happen!
  get "/artworks/:id" => redirect('/artwork/%{id}')</p>

<p>  # No match? Rails handles routing the 404 error.</p>

<p>end
```</p>

<p>An added bonus here is a near one to one mapping with the Rails and client routes.</p>

<p>```coffeescript</p>

<h1>Backbone.js - Client</h1>

<p>class App.Routers.Client extends Backbone.Router</p>

<p>  routes:</p>

<pre><code>''            : 'home'
'artwork/:id' : 'artwork'
'artworks/:id': 'redirectToArtwork'
</code></pre>

<p>```</p>

<h2>URLs R 4 Ever</h2>

<p>Dan Webb's assertion that <a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">URLs are forever</a> is correct,
but so is Isaac Asimov's statement on change. You can't predict the future.
You make decisions based on the best data you have at the time. We started our app with hashtag routing
in early 2011 and added the ! around five months later (about the same time Dan Webb wrote his post).
Had we started Artsy today, even six months ago, I'm confident we would have enabled Backbone's pushState routing.
There's no need to look back. The future is here and its URLs are #! free!</p>

<h3>Footnotes</h3>

<ul>
<li><a href="http://documentcloud.github.com/backbone">Backbone.js</a></li>
<li><a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Google offers #! to aid the crawlability of AJAX hash routed applications</a></li>
<li><a href="http://caniuse.com/#feat=history">Browser support for the HTML5 History API (aka pushState)</a></li>
<li><a href="http://www.adequatelygood.com/2011/2/Thoughts-on-the-Hashbang">Twitter advocates #!</a></li>
<li><a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb's critique <em>It's About the Hashbangs</em></a></li>
<li><a href="http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html">Twitter ditches #!</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
