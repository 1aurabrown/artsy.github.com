<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rake | Art.sy Engineering]]></title>
  <link href="http://artsy.github.com/blog/categories/rake/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2013-01-31T11:40:38-05:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Art.sy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create MongoDB Command-Lines from Mongoid Configuration]]></title>
    <link href="http://artsy.github.com/blog/2013/01/31/create-mongodb-command-lines-with-mongo/"/>
    <updated>2013-01-31T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2013/01/31/create-mongodb-command-lines-with-mongo</id>
    <content type="html"><![CDATA[<p>We use MongoDB as our primary store and have built a healthy amount of automation around various database instances and operational environments. For example, we backup databases to S3 using <code>mongodump</code>, mirror data between instances with <code>mongorestore</code> and often need to open a MongoDB shell with <code>mongo</code> to examine data at the lowest level.</p>

<p>Generating MongoDB command-lines is tedious and error-prone. Introducing a new gem called <a href="https://github.com/dblock/mongoid-shell">mongoid-shell</a> to help with this. The library can generate command-lines for various MongoDB shell tools from your Mongoid configuration.</p>

<p>For example, connect to your production MongoDB instance from a <code>db:production:shell</code> Rake task.</p>

<p>```ruby
namespace :db
  namespace :production</p>

<pre><code>task :shell
  Mongoid.load! "mongoid.yml", :production
  system Mongoid::Shell::Commands::Mongo.new.to_s
end
</code></pre>

<p>  end
end
```</p>

<!-- more -->


<p>Commands can be created for the current default session or you can pass a session as an argument to a new command.</p>

<p>```ruby</p>

<h1>will use Mongoid.default_session</h1>

<p>Mongoid::Shell::Commands::Mongodump.new</p>

<h1>use a hand-crafted session</h1>

<p>s = Moped::Session.new([ "127.0.0.1:27017" ])
Mongoid::Shell::Commands::Mongodump.new(session: s)
```</p>

<p>Commands accept parameters. Here's how to backup <code>my_database</code> to <code>/tmp/db_backup</code>.</p>

<p>```ruby
out = File.join(Dir.tmpdir, 'db_backup')
db = 'my_database'
dump = Mongoid::Shell::Commands::Mongodump.new(db: db, out: out)</p>

<h1>mongodump --db my_database --out /tmp/db_backup</h1>

<p>system dump.to_s
```</p>

<p>The mongoid-shell gem currently supports <code>mongo</code>, <code>mongodump</code>, <code>mongorestore</code> and <code>mongostat</code> and various MongoDB configurations, including replica-sets.</p>

<p>Please note that we don't recommend you store passwords for production environments in your <code>mongoid.yml</code>. At Artsy, we set all sensitive values directly on our Heroku instances with <code>heroku config:add</code> and use <a href="https://github.com/dblock/heroku-commander">heroku-commander</a> to retrieve these settings in rake. We also have a bit of convention in our application name, such as "app-staging" and "app-production".</p>

<p>Here's a complete Rake task that dynamically fetches Heroku configuration and opens a MongoDB shell on a production or staging environment.</p>

<p>```ruby
namespace :db do
  [ :staging, :production ].each do |env|</p>

<pre><code>namespace env do
  task :shell do
    app = "myapp-#{env}"
    config = Heroku::Commander.new(app: app).config
    config.each_pair do |k, v|
      ENV[k] = v
    end
    mongoid_yml = File.join(Rails.root, "config/mongoid.yml")
    Mongoid.load! mongoid_yml, env
    system Mongoid::Shell::Commands::Mongo.new.to_s
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Run <code>rake db:staging:shell</code> or <code>rake db:production:shell</code>, which works as long as you have access to the Heroku app itself. A bonus feature is that the mongoid-shell gem will automatically connect to the primary node of a replica-set.</p>

<p>```
$ rake db:staging:shell
 mongo db:10007/app-staging --username user --password ************
 MongoDB shell version: 2.0.7
 connecting to: db:10007/app-staging</p>

<blockquote><p>```</p></blockquote>
]]></content>
  </entry>
  
</feed>
